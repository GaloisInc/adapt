mgmt = graph.openManagement() ;

/* Raw provenance graph */

/* Edge labels */

wasAssociatedWith = mgmt.makeEdgeLabel('wasAssociatedWith').multiplicity(SIMPLE).make()
used 		  = mgmt.makeEdgeLabel('used').multiplicity(SIMPLE).make()
wasStartedBy 	  = mgmt.makeEdgeLabel('wasStartedBy').multiplicity(SIMPLE).make()
wasGeneratedBy 	  = mgmt.makeEdgeLabel('wasGeneratedBy').multiplicity(SIMPLE).make()
wasEndedBy 	  = mgmt.makeEdgeLabel('wasEndedBy').multiplicity(SIMPLE).make()
wasAttributedTo   = mgmt.makeEdgeLabel('wasAttributedTo').multiplicity(SIMPLE).make()
wasDerivedFrom    = mgmt.makeEdgeLabel('wasDerivedFrom').multiplicity(SIMPLE).make()
actedOnBehalfOf   = mgmt.makeEdgeLabel('actedOnBehalfOf').multiplicity(SIMPLE).make()
wasInvalidatedBy  = mgmt.makeEdgeLabel('wasInvalidatedBy').multiplicity(SIMPLE).make() 



/* Property Keys */
/* There is no way to associate key names to vertex or edge types. */

/* Could use vertex labels instead of vertexType... */
vertexType  = mgmt.makePropertyKey("vertexType").dataType(String).cardinality(Cardinality.SINGLE).make()

/* Agent properties */
name 	    = mgmt.makePropertyKey("name").dataType(String).cardinality(Cardinality.SINGLE).make()
user 	    = mgmt.makePropertyKey("user").dataType(String).cardinality(Cardinality.SINGLE).make()
machine     = mgmt.makePropertyKey("machine").dataType(String).cardinality(Cardinality.SINGLE).make()

/* Unit of Execution properties */
/* user - already defined */
pid 	    = mgmt.makePropertyKey("PID").dataType(String).cardinality(Cardinality.SINGLE).make()
ppid 	    = mgmt.makePropertyKey("PPID").dataType(String).cardinality(Cardinality.SINGLE).make()
started     = mgmt.makePropertyKey("started").dataType(Date).cardinality(Cardinality.SINGLE).make()
/* machine - already defined */
hadPrivs    = mgmt.makePropertyKey("hadPrivs").dataType(String).cardinality(Cardinality.SINGLE).make()
pwd 	    = mgmt.makePropertyKey("PWD").dataType(String).cardinality(Cardinality.SINGLE).make()
ended 	    = mgmt.makePropertyKey("ended").dataType(Date).cardinality(Cardinality.SINGLE).make()
group 	    = mgmt.makePropertyKey("group").dataType(String).cardinality(Cardinality.SINGLE).make()
commandLine = mgmt.makePropertyKey("commandLine").dataType(String).cardinality(Cardinality.SINGLE).make()
source      = mgmt.makePropertyKey("source").dataType(String).cardinality(Cardinality.SINGLE).make()
programName = mgmt.makePropertyKey("programName").dataType(String).cardinality(Cardinality.SINGLE).make()
cwd 	    = mgmt.makePropertyKey("CWD").dataType(String).cardinality(Cardinality.SINGLE).make()
uid   	    = mgmt.makePropertyKey("UID").dataType(String).cardinality(Cardinality.SINGLE).make()

/* Artifact properties */
type        = mgmt.makePropertyKey("type").dataType(String).cardinality(Cardinality.SINGLE).make()
registryKey = mgmt.makePropertyKey("registryKey").dataType(String).cardinality(Cardinality.SINGLE).make()
coarseLoc   = mgmt.makePropertyKey("coarseLoc").dataType(String).cardinality(Cardinality.SINGLE).make()
fineLoc	    = mgmt.makePropertyKey("fineLoc").dataType(String).cardinality(Cardinality.SINGLE).make()
created	    = mgmt.makePropertyKey("created").dataType(Date).cardinality(Cardinality.SINGLE).make()
version	    = mgmt.makePropertyKey("version").dataType(String).cardinality(Cardinality.SINGLE).make()
deleted	    = mgmt.makePropertyKey("deleted").dataType(Date).cardinality(Cardinality.SINGLE).make()
owner	    = mgmt.makePropertyKey("owner").dataType(String).cardinality(Cardinality.SINGLE).make()
size	    = mgmt.makePropertyKey("size").dataType(String).cardinality(Cardinality.SINGLE).make()
/* source/destination port/address already defined */
taint	    = mgmt.makePropertyKey("taint").dataType(String).cardinality(Cardinality.SET).make()

/* Predicate attributes */

atTime    = mgmt.makePropertyKey("atTime").dataType(Date).cardinality(Cardinality.SINGLE).make()
startTime = mgmt.makePropertyKey("startTime").dataType(Date).cardinality(Cardinality.SINGLE).make()
endTime   = mgmt.makePropertyKey("endTime").dataType(Date).cardinality(Cardinality.SINGLE).make()

genOp     = mgmt.makePropertyKey("genOp").dataType(String).cardinality(Cardinality.SINGLE).make()
returnVal = mgmt.makePropertyKey("returnVal").dataType(String).cardinality(Cardinality.SINGLE).make()
operation = mgmt.makePropertyKey("operation").dataType(String).cardinality(Cardinality.SINGLE).make()
args 	  = mgmt.makePropertyKey("args").dataType(String).cardinality(Cardinality.LIST).make()
cmd 	  = mgmt.makePropertyKey("cmd").dataType(String).cardinality(Cardinality.SINGLE).make()
deriveOp  = mgmt.makePropertyKey("deriveOp").dataType(String).cardinality(Cardinality.SINGLE).make()
execOp 	  = mgmt.makePropertyKey("execOp").dataType(String).cardinality(Cardinality.SINGLE).make()

machineId          = mgmt.makePropertyKey("machineId").dataType(String).cardinality(Cardinality.SINGLE).make()
sourceAddress  	   = mgmt.makePropertyKey("sourceAddress").dataType(String).cardinality(Cardinality.SINGLE).make()
destinationAddress = mgmt.makePropertyKey("destinationAddress").dataType(String).cardinality(Cardinality.SINGLE).make()
sourcePort 	   = mgmt.makePropertyKey("sourcePort").dataType(String).cardinality(Cardinality.SINGLE).make()
destinationPort    = mgmt.makePropertyKey("destinationPort").dataType(String).cardinality(Cardinality.SINGLE).make()
protocol 	   = mgmt.makePropertyKey("protocol").dataType(String).cardinality(Cardinality.SINGLE).make()

permissions = mgmt.makePropertyKey("permissions").dataType(String).cardinality(Cardinality.LIST).make()


/* Segmenting */

segment = mgmt.makeVertexLabel('segment').make()

segmentContains = mgmt.makeEdgeLabel('segmentContains').multiplicity(SIMPLE).make()


mgmt.commit()
