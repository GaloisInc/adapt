
{
    "simple_with_marker_3.avro": {
        "pre": [
            {
                "query": "g.V().drop().iterate(); graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            },
            {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "Thread.sleep(75000)",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Await ingest completion, as test_interpreter is not yet a kafka consumer."
            },
            {
                "query": "g.V().hasLabel('Subject').count().next() > 600",
                "response": "[Message(status_code=200, data=[True], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are subjects."
            }
            ],
        "se": [
            {
                "query": "g.V().hasLabel('Segment').count().next() > 0",
                "response": "[Message(status_code=200, data=[True], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segment nodes were inserted."
            }
	    ],
        "ad": [],
        "ac": [
            {
                "query": "g.V().hasLabel('Segment').out().hasLabel('Activity').out().hasLabel('Entity-File').count().next() > 0",
                "response": "[Message(status_code=200, data=[True], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify activity classification nodes were inserted."
            }
            ],
        "dx": []
    }
}
