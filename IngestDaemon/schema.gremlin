:> mgmt = graph.openManagement() ; mgmt.makeVertexLabel('segment').make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasAssociatedWith').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('used').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasStartedBy').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasGeneratedBy').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasEndedBy').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasAttributedTo').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasDerivedFrom').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('actedOnBehalfOf').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('wasInvalidatedBy').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('segmentContains').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makeEdgeLabel('segmentCaused').multiplicity(SIMPLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('vertexType').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('name').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('user').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('machine').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('PID').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('PPID').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('started').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('hadPrivs').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('PWD').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('ended').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('group').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('commandLine').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('source').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('programName').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('CWD').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('UID').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('type').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('registryKey').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('coarseLoc').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('fineLoc').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('created').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('version').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('deleted').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('owner').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('size').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('taint').dataType(String.class).cardinality(SET).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('atTime').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('startTime').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('endTime').dataType(Date.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('genOp').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('returnVal').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('operation').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('args').dataType(String.class).cardinality(LIST).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('cmd').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('deriveOp').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('execOp').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('machineId').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('sourceAddress').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('destinationAddress').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('sourcePort').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('destinationPort').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('protocol').dataType(String.class).cardinality(SINGLE).make() ; mgmt.commit()
:> mgmt = graph.openManagement() ; mgmt.makePropertyKey('permissions').dataType(String.class).cardinality(LIST).make() ; mgmt.commit()
