/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm18;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * An assertion about the provenance of information */
@org.apache.avro.specific.AvroGenerated
public class ProvenanceAssertion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -54822569025902807L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProvenanceAssertion\",\"namespace\":\"com.bbn.tc.schema.avro.cdm18\",\"doc\":\"* An assertion about the provenance of information\",\"fields\":[{\"name\":\"asserter\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"Which Subject is making this assertion?\"},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"UUID\"}],\"doc\":\"Object(s) that this Value's data came from.\",\"default\":null},{\"name\":\"provenance\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ProvenanceAssertion\"}],\"doc\":\"* Further provenance assertions within this assertion.\\n\\t * For example, to describe a situation in which X asserts that\\n\\t * Y asserts that Z asserts that V came from {p,q}:\\n\\t *\\n\\t * ```\\n\\t * Event {\\n\\t *   subject = X,\\n\\t *   parameters = [\\n\\t *     Value (V) {\\n\\t *       provenance = [\\n\\t *         ProvenanceAssertion {\\n\\t *           asserter = UUID of X,\\n\\t *           sources = [ UUID of p, UUID of q ],\\n\\t *           provenance = [\\n\\t *             ProvenanceAssertion {\\n\\t *               asserter = UUID of Y,\\n\\t *               provenance = [\\n\\t *                 ProvenanceAssertion {\\n\\t *                   asserter = UUID of Z,\\n\\t *                 },\\n\\t *               ],\\n\\t *             },\\n\\t *           ],\\n\\t *         },\\n\\t *       ],\\n\\t *     },\\n\\t *   ],\\n\\t * }\\n\\t * ```\\n\\t * Z should have a provenance assertion\\n\\t * e.g.,\\n         * \\\"X asserts that Y asserts that Z comes from {p,q}\\\".\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Which Subject is making this assertion? */
  @Deprecated public com.bbn.tc.schema.avro.cdm18.UUID asserter;
  /** Object(s) that this Value's data came from. */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> sources;
  /** * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}". */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> provenance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProvenanceAssertion() {}

  /**
   * All-args constructor.
   * @param asserter Which Subject is making this assertion?
   * @param sources Object(s) that this Value's data came from.
   * @param provenance * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
   */
  public ProvenanceAssertion(com.bbn.tc.schema.avro.cdm18.UUID asserter, java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> sources, java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> provenance) {
    this.asserter = asserter;
    this.sources = sources;
    this.provenance = provenance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return asserter;
    case 1: return sources;
    case 2: return provenance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: asserter = (com.bbn.tc.schema.avro.cdm18.UUID)value$; break;
    case 1: sources = (java.util.List<com.bbn.tc.schema.avro.cdm18.UUID>)value$; break;
    case 2: provenance = (java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'asserter' field.
   * @return Which Subject is making this assertion?
   */
  public com.bbn.tc.schema.avro.cdm18.UUID getAsserter() {
    return asserter;
  }

  /**
   * Sets the value of the 'asserter' field.
   * Which Subject is making this assertion?
   * @param value the value to set.
   */
  public void setAsserter(com.bbn.tc.schema.avro.cdm18.UUID value) {
    this.asserter = value;
  }

  /**
   * Gets the value of the 'sources' field.
   * @return Object(s) that this Value's data came from.
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> getSources() {
    return sources;
  }

  /**
   * Sets the value of the 'sources' field.
   * Object(s) that this Value's data came from.
   * @param value the value to set.
   */
  public void setSources(java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   * @return * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> getProvenance() {
    return provenance;
  }

  /**
   * Sets the value of the 'provenance' field.
   * * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
   * @param value the value to set.
   */
  public void setProvenance(java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> value) {
    this.provenance = value;
  }

  /**
   * Creates a new ProvenanceAssertion RecordBuilder.
   * @return A new ProvenanceAssertion RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder();
  }

  /**
   * Creates a new ProvenanceAssertion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProvenanceAssertion RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder newBuilder(com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder other) {
    return new com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder(other);
  }

  /**
   * Creates a new ProvenanceAssertion RecordBuilder by copying an existing ProvenanceAssertion instance.
   * @param other The existing instance to copy.
   * @return A new ProvenanceAssertion RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder newBuilder(com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion other) {
    return new com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder(other);
  }

  /**
   * RecordBuilder for ProvenanceAssertion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProvenanceAssertion>
    implements org.apache.avro.data.RecordBuilder<ProvenanceAssertion> {

    /** Which Subject is making this assertion? */
    private com.bbn.tc.schema.avro.cdm18.UUID asserter;
    /** Object(s) that this Value's data came from. */
    private java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> sources;
    /** * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}". */
    private java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> provenance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.asserter)) {
        this.asserter = data().deepCopy(fields()[0].schema(), other.asserter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sources)) {
        this.sources = data().deepCopy(fields()[1].schema(), other.sources);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provenance)) {
        this.provenance = data().deepCopy(fields()[2].schema(), other.provenance);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ProvenanceAssertion instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.asserter)) {
        this.asserter = data().deepCopy(fields()[0].schema(), other.asserter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sources)) {
        this.sources = data().deepCopy(fields()[1].schema(), other.sources);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provenance)) {
        this.provenance = data().deepCopy(fields()[2].schema(), other.provenance);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'asserter' field.
      * Which Subject is making this assertion?
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm18.UUID getAsserter() {
      return asserter;
    }

    /**
      * Sets the value of the 'asserter' field.
      * Which Subject is making this assertion?
      * @param value The value of 'asserter'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder setAsserter(com.bbn.tc.schema.avro.cdm18.UUID value) {
      validate(fields()[0], value);
      this.asserter = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'asserter' field has been set.
      * Which Subject is making this assertion?
      * @return True if the 'asserter' field has been set, false otherwise.
      */
    public boolean hasAsserter() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'asserter' field.
      * Which Subject is making this assertion?
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder clearAsserter() {
      asserter = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sources' field.
      * Object(s) that this Value's data came from.
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> getSources() {
      return sources;
    }

    /**
      * Sets the value of the 'sources' field.
      * Object(s) that this Value's data came from.
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder setSources(java.util.List<com.bbn.tc.schema.avro.cdm18.UUID> value) {
      validate(fields()[1], value);
      this.sources = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * Object(s) that this Value's data came from.
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sources' field.
      * Object(s) that this Value's data came from.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder clearSources() {
      sources = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'provenance' field.
      * * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> getProvenance() {
      return provenance;
    }

    /**
      * Sets the value of the 'provenance' field.
      * * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
      * @param value The value of 'provenance'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder setProvenance(java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion> value) {
      validate(fields()[2], value);
      this.provenance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'provenance' field has been set.
      * * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
      * @return True if the 'provenance' field has been set, false otherwise.
      */
    public boolean hasProvenance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'provenance' field.
      * * Further provenance assertions within this assertion.
	 * For example, to describe a situation in which X asserts that
	 * Y asserts that Z asserts that V came from {p,q}:
	 *
	 * ```
	 * Event {
	 *   subject = X,
	 *   parameters = [
	 *     Value (V) {
	 *       provenance = [
	 *         ProvenanceAssertion {
	 *           asserter = UUID of X,
	 *           sources = [ UUID of p, UUID of q ],
	 *           provenance = [
	 *             ProvenanceAssertion {
	 *               asserter = UUID of Y,
	 *               provenance = [
	 *                 ProvenanceAssertion {
	 *                   asserter = UUID of Z,
	 *                 },
	 *               ],
	 *             },
	 *           ],
	 *         },
	 *       ],
	 *     },
	 *   ],
	 * }
	 * ```
	 * Z should have a provenance assertion
	 * e.g.,
         * "X asserts that Y asserts that Z comes from {p,q}".
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion.Builder clearProvenance() {
      provenance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ProvenanceAssertion build() {
      try {
        ProvenanceAssertion record = new ProvenanceAssertion();
        record.asserter = fieldSetFlags()[0] ? this.asserter : (com.bbn.tc.schema.avro.cdm18.UUID) defaultValue(fields()[0]);
        record.sources = fieldSetFlags()[1] ? this.sources : (java.util.List<com.bbn.tc.schema.avro.cdm18.UUID>) defaultValue(fields()[1]);
        record.provenance = fieldSetFlags()[2] ? this.provenance : (java.util.List<com.bbn.tc.schema.avro.cdm18.ProvenanceAssertion>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
