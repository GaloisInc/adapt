adapt {
  runflow = "ui"
  app = "prod"  // One of: `accept`, `dev`, `prod` or maybe `cluster`
  ingest {
    loadfiles = ["/Users/ryan/Desktop/ta1-cadets-pandex-cdm17.bin"] //ta1-trace-cdm17.bin" // ta1-clearscope-cdm17.bin" // cdm17_0407_1607.bin" //  ta1-clearscope-cdm17.bin"  //ta1-cadets-cdm17-3.bin" //]
    startatoffset = 0
    loadlimit = 0    // 0 for no limit
    parallelism = 10
  }
  runtime {
    apitimeout = 301
    port = 8080
    titankeyspace = "titan"   // "titan" is the default value if keyspace is never set
    cleanupthreshold = 10  // after this many cleanup messages, the stream component will delete or write to disk
    expansionqueryfreq = 60
    iforestpath = "/home/darpa/iforest.exe"  //  "/Users/ryan/Code/adapt/AdaptJVM/src/main/resources/bin/iforest.exe"  //
    iforestparallelism = 4
    shouldnoramlizeanomalyscores = false
    basecleanupseconds = 10
    featureextractionseconds = 10
    throwawaythreshold = 10000
    notesfile = "/home/darpa/notes.json" //  "/Users/ryan/Desktop/notes.json"  //
    systemname = "Engagement2+"
  }
  env {
    ta1 = "file"
    scenario = "pandex"
    ta1kafkatopic = ta1-${adapt.env.ta1}-${adapt.env.scenario}-cdm17
    theiaresponsetopic = ta1-theia-${adapt.env.scenario}-qr
    kafkabootstrap = "ta3-starc-adapt-1-tcip.tc.bbn.com:9092"  //"localhost:9092"
  }
}

akka {
  loglevel = INFO
  kafka {
    producer {
      close-timeout = 60s
      kafka-clients {
        bootstrap.servers = ${adapt.env.kafkabootstrap}
      }
    }
    consumer {
      kafka-clients {
        bootstrap.servers = ${adapt.env.kafkabootstrap}
        group.id = ADAPT-${adapt.runtime.systemname}-${adapt.env.ta1}-${adapt.env.scenario}
      }
    }
  }
  http.server {
    interface = "localhost"
    port = ${adapt.runtime.port}
    request-timeout = ${adapt.runtime.apitimeout} seconds
    idle-timeout = ${akka.http.server.request-timeout}
  }
  actor {
    warn-about-java-serializer-usage = yes
    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedMailbox"
//      mailbox-capacity = 1000  // Not used for unbounded
//      mailbox-push-timeout-time = 10s

      # For Actor with Stash: The default capacity of the stash.
      # If negative (or zero) then an unbounded stash is used (default)
      # If positive then a bounded stash is used and the capacity is set using
      # the property
//      stash-capacity = -1


      size-limit = 100

    }

    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 1

//      thread-pool-executor {
//        core-pool-size-min = 2
//        core-pool-size-factor = 2.0
//        core-pool-size-max = 4
//      }
    }

    //  actor {
    //    provider = "cluster"
    //  }
    //  version = 2.4.18   // Only needed for clusering... I think.
    //  cluster {
    //    protocol-prefix = "akka.tcp://"
    //    seed-nodes = [
    //      "akka.tcp://"${adapt.runtime.systemname}"@127.0.0.1:2551"
    ////    , "akka.tcp://"${adapt.runtime.systemname}"@127.0.0.1:2552"
    //    ]
    ////    this-node-address = ${akka.cluster.protocol-prefix}${adapt.runtime.systemname}"@"${akka.remote.netty.tcp.address}":"${akka.remote.netty.tcp.port}
    //    roles = ${adapt.roles}
    //    metrics.enabled=off
    //    min-nr-of-members = 2
    //  }
    //  remote {
    //    log-remote-lifecycle-events = off
    //    netty.tcp {
    //      hostname = "127.0.0.1"
    //      port = 2551
    //      message-frame-size =  1000000b
    //      send-buffer-size =  1000000b
    //      receive-buffer-size =  1000000b
    //      maximum-frame-size = 1000000b
    //    }
    //    maximum-payload-bytes = 1000000 bytes
    //  }
    //  persistence {
    //    journal.plugin = "inmemory-journal"
    //    snapshot-store.plugin = "inmemory-snapshot-store"
    //  }

  }
}

