{
    "netflow" : {
        "description" : "Analyze netflow nodes i.e. network sockets for possible anomalous behavior",
        "instance_set" : "g.V().has('eventType',6).both().both().hasLabel('Entity-NetFlow').dedup().id()",
        "feature_set" : {
            "write_bytes":
                "g.V({id}).both().both().has('eventType',21).values('size').sum()",
            "read_bytes":
                "g.V({id}).both().both().has('eventType',17).values('size').sum()",
            "num_writes":
                "g.V({id}).both().both().has('eventType',21).count()",
            "num_reads":
                "g.V({id}).both().both().has('eventType',17).count()",
            "num_open":
                "g.V({id}).both().both().has('eventType',16).count()",
            "num_close":
                "g.V({id}).both().both().has('eventType',5).count()",
            "duration":
                "(g.V({id}).both().both().has('subjectType',4).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',6).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "netflow_connect_process_exec" : {
        "description" : "Analyze netflow nodes that have connection with file execution (potential remote execution command)",
        "instance_set" : "g.V().has('eventType',6).both().both().hasLabel('Entity-NetFlow').dedup().as('netflow').both().both().has('subjectType',4).out('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').dedup().in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').has('eventType',9).select('netflow').dedup().id()",
        "feature_set" : {
            "write_bytes":
                "g.V({id}).both().both().has('eventType',21).values('size').sum()",
            "read_bytes":
                "g.V({id}).both().both().has('eventType',17).values('size').sum()",
            "num_writes":
                "g.V({id}).both().both().has('eventType',21).count()",
            "num_reads":
                "g.V({id}).both().both().has('eventType',17).count()",
            "num_open":
                "g.V({id}).both().both().has('eventType',16).count()",
            "num_close":
                "g.V({id}).both().both().has('eventType',5).count()",
            "duration":
                "(g.V({id}).both().both().has('subjectType',4).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',6).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "netflow_connect_last_activity_gap" : {
        "description" : "Identify netflow nodes that are open for long time",
        "instance_set": "g.V().has('eventType',6).both().both().has(label,'Entity-NetFlow').dedup().id()",
        "feature_set": {
            "connect_last_activity_gap":
                "(g.V({id}).both().both().has('subjectType',4).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',6).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "netflow_long_write_delay" : {
        "description" : "Identify netflow nodes with long writing delay (potential exfiltration)",
        "instance_set": "g.V().has(label,'Entity-NetFlow').as('netflow').local(both().both().has('eventType',21).count().is(gt(1))).select('netflow').dedup().id()",
        "feature_set": {
            "first_last_write_gap":
                "(g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0",
            "num_writes":
                "g.V({id}).both().both().has('eventType',21).count()"
        }
    },


    "process_connected_with_netflow" : {
        "description" : "Analyze process nodes that have network activity",
        "instance_set" : "g.V().has('subjectType',0).as('process').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_AFFECTS_NETFLOW out').out('EDGE_EVENT_AFFECTS_NETFLOW in').select('process').dedup().id()",
        "feature_set" : {
            "num_file_open_during_wr_to_netflow":
                "g.V({id}).as('process').both().both().has('eventType',21).as('writeNetflow').both().both().has(label,'Entity-NetFlow').select('process').both().both().has('eventType',16).as('openFile').both().both().has(label,'Entity-File').select('writeNetflow','openFile').by('startedAtTime').where('writeNetflow',gte('openFile')).count()",
            "num_distinct_dst_port_access":
                "g.V({id}).both().both().has('subjectType',4).both().both().has(label,'Entity-NetFlow').values('dstPort').dedup().count()",
            "num_distinct_src_port_access":
                "g.V({id}).both().both().has('subjectType',4).both().both().has(label,'Entity-NetFlow').values('srcPort').dedup().count()",
            "total_bytes_sent_to_netflow":
                "g.V({id}).both().both().has('eventType',21).as('event').both().both().has(label,'Entity-NetFlow').select('event').has('size').values('size').sum()",
            "total_bytes_rcv_from_netflow":
                "g.V({id}).both().both().has('eventType',17).as('event').both().both().has(label,'Entity-NetFlow').select('event').has('size').values('size').sum()",
            "num_writes_to_net_flow":
                "g.V({id}).both().both().has('eventType',21).both().both().has(label,'Entity-NetFlow').count()",
            "num_reads_to_netflow":
                "g.V({id}).both().both().has('eventType',17).both().both().has(label,'Entity-NetFlow').count()"
        }
    },

    "process_connect_many_netflow" : {
        "description": "Analyze process nodes that have many distinct network activity within same network hosts",
        "instance_set": "g.V().has('subjectType',0).as('process').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_AFFECTS_NETFLOW out').out('EDGE_EVENT_AFFECTS_NETFLOW in').select('process').dedup().id()",
        "feature_set": {
            "num_distinct_dst_ip_access":
                "g.V({id}).both().both().has('subjectType',4).both().both().has(label,'Entity-NetFlow').values('dstAddress').dedup().count()"
        }
    },

    "process_connect_rare_ip" : {
        "description": "Analyze process nodes that have rare ip access",
        "instance_set": "g.V().has('subjectType',0).as('process').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_AFFECTS_NETFLOW out').out('EDGE_EVENT_AFFECTS_NETFLOW in').select('process').dedup().id()",
        "feature_set": {
            "num_distinct_dst_ip_access":
                "g.V({id}).both().both().has('subjectType',4).both().both().has(label,'Entity-NetFlow').values('dstAddress').dedup().count()"
        }
    },

    "process_long_write_to_netflow" : {
        "description" : "Identify process nodes with long writing delay (potential exfiltration)",
        "instance_set": "g.V().has('subjectType',0).as('process').local(both().both().has('eventType',21).as('netflow_write').both().both().has(label,'Entity-NetFlow').select('netflow_write').count().is(gt(1))).select('process').dedup().id()",
        "feature_set": {
            "first_last_write_gap":
                "(g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0",
            "num_writes":
                "g.V({id}).both().both().has('eventType',21).count()"
        }
    },

    "process_write_rate_to_netflow" : {
        "description" : "Identify process with slow write rate (potential exfiltration)",
        "instance_set": "g.V().has('subjectType',0).as('process').local(both().both().has('eventType',21).as('netflow_write').both().both().has(label,'Entity-NetFlow').select('netflow_write').count().is(gt(1))).select('process').dedup().id()",
        "feature_set": {
            "write_rate":
                "g.V({id}).both().both().has('eventType',21).as('netflow_write').both().both().has(label,'Entity-NetFlow').select('netflow_write').values('size').sum().next() / (g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0",
            "time_gap_per_writes":
                "(g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0 / g.V({id}).both().both().has('eventType',21).count()"
        }
    },

    "process_access_file_attributes" : {
        "description" : "Analyze process that access attributes of files",
        "instance_set": "g.V().has('subjectType',0).and(both().both().has('eventType',9),both().both().has('eventType',14)).id()",
        "feature_set": {
            "num_chk_attrib":
                "g.V({id}).both().both().has('eventType',9).count()",
            "num_modify_attrib":
                "g.V({id}).both().both().has('eventType',14).count()"
        }
    },


    "files_connected_with_netflow" : {
        "description" : "Analyze files that have connection with netflow (potential downloaded files)",
        "instance_set" : "g.V().has('subjectType',4).as('net_events').out('EDGE_EVENT_AFFECTS_NETFLOW out').select('net_events').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').dedup().in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_AFFECTS_FILE out').out('EDGE_EVENT_AFFECTS_FILE in').dedup().id()",
        "feature_set" : {
            "num_exec":
                "g.V({id}).both().both().has('eventType',3).count()",
            "num_close":
                "g.V({id}).both().both().has('eventType',5).count()",
            "num_chk_attrib":
                "g.V({id}).both().both().has('eventType',9).count()",
            "num_modify_attrib":
                "g.V({id}).both().both().has('eventType',14).count()",
            "num_open":
                "g.V({id}).both().both().has('eventType',16).count()",
            "num_read":
                "g.V({id}).both().both().has('eventType',17).count()",
            "num_rename":
                "g.V({id}).both().both().has('eventType',20).count()",
            "num_write":
                "g.V({id}).both().both().has('eventType',21).count()",
            "num_uploads":
                "g.V({id}).both().both().has('eventType',17).as('file_read').both().both().has('subjectType',0).as('process').both().both().has('eventType',21).as('netflow_write').both().both().has(label,'Entity-NetFlow').dedup().count()"
        }
    },

    "files_executed" : {
        "description" : "Analyze executed files",
        "instance_set" : "g.V().has('eventType',9).both().both().has(label,'Entity-File').dedup().id()",
        "feature_set" : {
            "num_exec":
                "g.V({id}).both().both().has('eventType',3).count()",
            "num_close":
                "g.V({id}).both().both().has('eventType',5).count()",
            "num_chk_attrib":
                "g.V({id}).both().both().has('eventType',9).count()",
            "num_modify_attrib":
                "g.V({id}).both().both().has('eventType',14).count()",
            "num_open":
                "g.V({id}).both().both().has('eventType',16).count()",
            "num_read":
                "g.V({id}).both().both().has('eventType',17).count()",
            "num_rename":
                "g.V({id}).both().both().has('eventType',20).count()",
            "num_write":
                "g.V({id}).both().both().has('eventType',21).count()"
        }
    },

    "file_open_close_gap" : {
        "description" : "Identify files that are open for long time",
        "instance_set": "g.V().has('eventType',5).both().both().has(label,'Entity-File').dedup().as('files').both().both().has('eventType',16).select('files').dedup().id()",
        "feature_set": {
            "open_close_gap":
                "(g.V({id}).both().both().has('eventType',5).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',16).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "files_connect_netflow_long_write" : {
        "description" : "Identify files connected with netflow and with long writing delay (potential exfiltration)",
        "instance_set" : "g.V().has('eventType',21).as('write_events').out('EDGE_EVENT_AFFECTS_NETFLOW out').select('write_events').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').dedup().in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_AFFECTS_FILE out').out('EDGE_EVENT_AFFECTS_FILE in').dedup().id()",
        "feature_set": {
            "first_last_write_gap":
                "(g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0",
            "num_writes":
                "g.V({id}).both().both().has('eventType',21).count()"
        }
    },

    "file_dnld_exec_gap" : {
        "description" : "Detect files that are executed right after download",
        "instance_set": "g.V().has('eventType',9).both().both().has(label,'Entity-File').dedup().as('files').both().both().has('eventType',21).select('files').dedup().id()",
        "feature_set": {
            "dnld_exec_gap":
                "(g.V({id}).both().both().has('eventType',9).values('startedAtTime').min().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').max().next())/1000000.0"
        }
    },

    "file_attrib_change_exec_gap" : {
        "description" : "Detect files that are executed right after permission change",
        "instance_set": "g.V().has('eventType',9).both().both().has(label,'Entity-File').dedup().as('files').both().both().has('eventType',14).select('files').dedup().id()",
        "feature_set": {
            "attrib_change_exec_gap":
                "(g.V({id}).both().both().has('eventType',9).values('startedAtTime').min().next() - g.V({id}).both().both().has('eventType',14).values('startedAtTime').max().next())/1000000.0"
        }
    },

    "file_exec_del_gap" : {
        "description" : "Detect files that are deleted right after execution",
        "instance_set": "g.V().has('eventType',9).both().both().has(label,'Entity-File').dedup().as('files').both().both().has('eventType',12).select('files').dedup().id()",
        "feature_set": {
            "exec_del_gap":
                "(g.V({id}).both().both().has('eventType',9).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',12).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "file_last_write_upload_gap" : {
        "description" : "Detect files that are uploaded right after write (potential exfiltration)",
        "instance_set": "g.V().has('eventType',21).as('write_events').out('EDGE_EVENT_AFFECTS_NETFLOW out').select('write_events').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').out('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').dedup().in('EDGE_EVENT_ISGENERATEDBY_SUBJECT in').in('EDGE_EVENT_ISGENERATEDBY_SUBJECT out').has('eventType',17).out('EDGE_EVENT_AFFECTS_FILE out').out('EDGE_EVENT_AFFECTS_FILE in').dedup().id()",
        "feature_set": {
            "exec_del_gap":
                "(g.V({id}).both().both().has('eventType',17).values('startedAtTime').max().next() - g.V({id}).both().both().has('eventType',21).values('startedAtTime').min().next())/1000000.0"
        }
    },

    "files_executed_attribute_access" : {
        "description" : "Analyze file attribute access/change for executed files",
        "instance_set": "g.V().has('eventType',9).both().both().has(label,'Entity-File').dedup().id()",
        "feature_set": {
            "num_chk_attrib":
                "g.V({id}).both().both().has('eventType',9).count()",
            "num_modify_attrib":
                "g.V({id}).both().both().has('eventType',14).count()"
        }
    }
}
