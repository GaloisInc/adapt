import argparse
from joblib import Parallel, delayed
import os
import sys
import itertools
import re
import glob

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import edi.simple.fca as fca


parser = argparse.ArgumentParser(description='FCA script')
parser.add_argument('--input','-i',help='Input context file',required=True)
parser.add_argument('--output','-o',help='Output score file',required=True)
parser.add_argument('--min_support','-s',help="Minimum support percentage of the concepts to be computed (float required). Default:0",type=float,default=0)
#argument to specify the minimal support of the concepts to be returned by FCA (FCbO).
# A default of 0 is set, which means that all concepts are generated by default.
parser.add_argument('--min_confidence','-c',help="Minimum confidence percentage of the rules to be computed (float required). Default:0",type=float,default=0)
#argument to specify the minimal confidence of the rules to be returned by FCA (FCbO).
# A default of 0 is set, which means that all rules are generated by default.
parser.add_argument('--method', '-m',
					help='lift or conf or num',
					default='lift',
					choices=['lift','conf','num'])

def runProcessing(input_file,output_file,method='lift',support=0,confidence=0):
	context = fca.ContextProcessing(input_file) #read input data
	#start by running FCA to generate concepts then rules
	context.generateConcepts(support)
	context.generateRules(support,confidence)
	#proceed to scoring 
	context.score(method=method,score_file=output_file)

if __name__ == '__main__':
	#retrieving the arguments from the command line
	args = parser.parse_args()
	#processing input files
	runProcessing(args.input, args.output, method=args.method, support=args.min_support/100, confidence=args.min_confidence/100)

