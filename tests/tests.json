
{
    "5d_youtube_ie_output-100.avro": {
        "pre": [
            {
                "query": "g.E().drop().iterate() ; graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "jcheney@inf.ed.ac.uk",
                "explanation": "Drop all edges so that we have a clean starting point for remaining tests."
            }, {
                "query": "g.V().drop().iterate() ; graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "ryan@galois.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            }, {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "ryan@galois.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify files were ingested."
            },
            {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects were ingested."
            },
            {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents were ingested."
            }
        ],
        "se": [
            {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segment nodes were inserted."
            },
            {
                "query": "g.E().hasLabel('segment:includes').count()",
                "response": "[Message(status_code=200, data=[56], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify base nodes are included in segments."
            },
            {
                "query": "g.E().hasLabel('segment:edge').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that segments are connected to other segments."
            },
            {
                "query": "g.V().as('a').out('segment:includes').out().in('segment:includes').dedup().where(neq('a')).count().next() == g.E().hasLabel('segment:edge').count().next()",
                "response": "[Message(status_code=200, data=[True], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Ensure that segment edges connect two different segment nodes. Works fine in SegProfiling commit d0c61."
            }
        ],
        "ad": [
            {
                "query": "g.V().has(label,'Entity-NetFlow').local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each Entity-NetFlow node is contained within at least one segment"
            }, {
                "query": "g.V().has(label,'Subject').has('subjectType',0).local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each process node is contained within at least one segment"
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segments are stable."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there's no scores, yet. Feel free to revise."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyType').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there's not yet any types for those scores. Feel free to revise."
            }
        ],
        "ac": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify files are stable."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segments are stable."
            }, {
                "query": "g.V().has(label, 'Activity').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that no relevant features were found in the very short trace."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify scores are stable. Feel free to revise."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyType').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify score types are stable. Feel free to revise."
            }
        ],
        "dx": [
            {
                "query": "g.V().hasLabel('Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify files are stable."
            }, {
                "query": "g.V().hasLabel('Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().hasLabel('Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().hasLabel('Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify segments are stable."
            }, {
                "query": "g.V().hasLabel('Activity').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify activities are stable."
            }, {
                "query": "g.V().hasLabel('Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify scores are stable"
            }, {
                "query": "g.V().hasLabel('Phase').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify that no APT Phases are found in the very short trace."
            }, {
                "query": "g.V().hasLabel('APT').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify that no APTs are found in the very short trace."
            }, {
                "query": "g.E().hasLabel('apt:includes').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify that no APTs are found in the very short trace (no APTs, no edges)."
            }, {
                "query": "g.V().hasLabel('phase:includes').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify that no APT Phases are found in the very short trace (no Phases, no edges)."
            }, {
                "query": "g.V().hasLabel('phase:order').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "rui@parc.com",
                "explanation": "Verify that no APT Phases, hence no order, are found in the very short trace."
            }
        ]
    },
    "cameragrab1.bin": {
        "pre": [
            {
                "query": "g.V().drop().iterate(); graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            },
            {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "Thread.sleep(15000)",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Await ingest completion, as test_interpreter is not yet a kafka consumer."
            },
            {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[2783], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are subjects."
            }
            ],
        "se": [
            {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[51], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that many PID-based segments were found."
            }
        ],
        "ad": [
            {
                "query": "g.V().has(label,'Entity-NetFlow').local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each Entity-NetFlow node is contained within at least one segment"
            }, {
                "query": "g.V().has(label,'Subject').has('subjectType',0).local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each process node is contained within at least one segment"
            }
        ],
        "ac": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[1557], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are files."
            },
            {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are no agents."
            },
            {
                "query": "g.V().has(label, 'Activity').count()",
                "response": "[Message(status_code=200, data=[8], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that no relevant features were found in the very short trace."
            }
        ],
        "dx": []
    },
    "ta5attack2_units.avro": {
        "pre": [
            {
                "query": "g.V().drop().iterate(); graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            },
            {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "Thread.sleep(15000)",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Await ingest completion, as test_interpreter is not yet a kafka consumer."
            },
            {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[5272], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are subjects."
            }
            ],
        "se": [],
        "ad": [
            {
                "query": "g.V().has(label,'Entity-NetFlow').local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each Entity-NetFlow node is contained within at least one segment"
            }, {
                "query": "g.V().has(label,'Subject').has('subjectType',0).local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that each process node is contained within at least one segment"
            }
        ],
        "ac": [],
        "dx": []
    }
}
