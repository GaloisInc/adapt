
{
    "5d_youtube_ie_output-100.avro": {
        "pre": [
            {
                "query": "g.V().drop()",
                "response": "[Message(status_code=204, data=None, message='', metadata={})]",
                "requester_email": "ryan@galois.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            }, {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "ryan@galois.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }
        ],
        "_se_throughput": "101 nodes in 17s:  5.9 node/sec.",
        "se": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify files are stable."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that a pair of PID-based segments were identified."
            }, {
                "query": "g.E().hasLabel('segment:includes').count()",
                "response": "[Message(status_code=200, data=[56], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that each segment points to many base nodes."
            }
        ],
        "ad": [
            {
                "query": "g.V().has(label,'Entity-NetFlow').local(both('segment:includes').count().is(0)).count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "siddiqmd@oregonstate.edu",
                "explanation": "Verify that all the Entity-NetFlow nodes are contained within at least one segment"
            },{
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify files are stable."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segments are stable."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there's no scores, yet. Feel free to revise."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyType').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there's not yet any types for those scores. Feel free to revise."
            }
        ],
        "ac": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify files are stable."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify subjects are stable."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify agents are stable."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify segments are stable."
            }, {
                "query": "g.V().has(label, 'Activity').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that no relevant features were found in the very short trace."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify scores are stable. Feel free to revise."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyType').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify score types are stable. Feel free to revise."
            }
        ],
        "dx": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[18], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[28], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Phase').count()",
                "response": "[Message(status_code=200, data=[1], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'APT').count()",
                "response": "[Message(status_code=200, data=[1], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Activity').count()",
                "response": "[Message(status_code=200, data=[1], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyScore').count()",
                "response": "[Message(status_code=200, data=[3], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }, {
                "query": "g.V().has(label, 'Segment').has('anomalyType').count()",
                "response": "[Message(status_code=200, data=[2], message='', metadata={})]",
                "requester_email": "fake@email.com",
                "explanation": "Sample test. To be deleted (or claimed) later."
            }
        ]
    },
    "_config_cameragrab1": "only these should be active in supervisord.conf:  zookeeper kafka ingestd dashboard",

    "_run_cameragrab1": "killall ingestd; tools/label_count.py; sleep 2; time tests/test_interpreter.py --data=~/adapt/trace/current/cameragrab1.bin",

    "cameragrab1.bin": {
        "pre": [
            {
                "query": "g.V().drop().iterate(); graph.tx().commit()",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Drop all data so that we have a clean starting point for remaining tests."
            },
            {
                "query": "g.V().count().next() + g.E().count().next()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Ensure that we have a clean starting point for remaining tests."
            }
        ],
        "in": [
            {
                "query": "Thread.sleep(15000)",
                "response": "[Message(status_code=200, data=[None], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Await ingest completion, as test_interpreter is not yet a kafka consumer."
            },
            {
                "query": "g.V().has(label, 'Subject').count()",
                "response": "[Message(status_code=200, data=[2783], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are subjects."
            }
            ],
        "se": [
            {
                "query": "g.V().has(label, 'Segment').count()",
                "response": "[Message(status_code=200, data=[51], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that many PID-based segments were found."
            }
        ],
        "ad": [],
        "ac": [
            {
                "query": "g.V().has(label, 'Entity-File').count()",
                "response": "[Message(status_code=200, data=[1557], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are files."
            },
            {
                "query": "g.V().has(label, 'Agent').count()",
                "response": "[Message(status_code=200, data=[0], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify there are no agents."
            },
            {
                "query": "g.V().has(label, 'Activity').count()",
                "response": "[Message(status_code=200, data=[8], message='', metadata={})]",
                "requester_email": "john.hanley@parc.com",
                "explanation": "Verify that no relevant features were found in the very short trace."
            }
        ],
        "dx": []
    }
}
