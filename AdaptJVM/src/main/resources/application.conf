adapt {
  ta1 = "file"
  iforestpath = "/home/darpa/iforest.exe"  //  "/Users/ryan/Code/adapt/AdaptJVM/src/main/resources/bin/iforest.exe"  //
  kafkabootstrap = "ta3-starc-adapt-1-tcip.tc.bbn.com:9092"  //"localhost:9092"

  titankeyspace = "titan"   // "titan" is the default value if keyspace is never set
  notesfile = "/home/darpa/notes.json" //  "/Users/ryan/Desktop/notes.json"  //
  scenario = "pandex"
  ta1kafkatopic = ta1-${adapt.ta1}-${adapt.scenario}-cdm17
  theiaresponsetopic = ta1-theia-${adapt.scenario}-qr
  runflow = "combined"
  app = "prod"  // One of: `accept`, `dev`, `prod` or maybe `cluster`
  loadlimit = 0
  startatoffset = 0
  loadfiles = ["/Users/ryan/Desktop/ta1-fivedirections-bovia-cdm17.bin"] //ta1-trace-cdm17.bin" // ta1-clearscope-cdm17.bin" // cdm17_0407_1607.bin" //  ta1-clearscope-cdm17.bin"  //ta1-cadets-cdm17-3.bin" //]
  systemname = "AdaptE2"
  iforestparallelism = 16
  shouldnoramlizeanomalyscores = false
  basecleanupseconds = 10
  featureextractionseconds = 10
  throwawaythreshold = 10000
  expansionqueryfreq = 60
  cleanupthreshold = 10  // after this many cleanup messages, the stream component will delete or write to disk
  apitimeout = 121

  ingest.minsubscribers = 1
  roles = ["db", "ingest", "ui"]
  dev.localstorage = none // /Users/ryan/Desktop/graph.json
}


akka {
  version = 2.4.18
  kafka {
    producer {
      close-timeout = 60s
      kafka-clients {
        bootstrap.servers = ${adapt.kafkabootstrap}
      }
    }
    consumer {
      kafka-clients {
        bootstrap.servers = ${adapt.kafkabootstrap}
        group.id = ${adapt.systemname}-${adapt.ta1}-${adapt.systemname}-ingester
      }
    }
  }
  http.server {
    interface = "0.0.0.0"
    port = 8080
    request-timeout = 120 seconds
  }
  actor {
    //    provider = "cluster"
  }
  cluster {
    protocol-prefix = "akka.tcp://"
    seed-nodes = [
      "akka.tcp://"${adapt.systemname}"@127.0.0.1:2551"
//    , "akka.tcp://"${adapt.systemname}"@127.0.0.1:2552"
    ]
//    this-node-address = ${akka.cluster.protocol-prefix}${adapt.systemname}"@"${akka.remote.netty.tcp.address}":"${akka.remote.netty.tcp.port}
    roles = ${adapt.roles}
    metrics.enabled=off
    min-nr-of-members = 2
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
      message-frame-size =  1000000b
      send-buffer-size =  1000000b
      receive-buffer-size =  1000000b
      maximum-frame-size = 1000000b
    }
    maximum-payload-bytes = 1000000 bytes
  }
  loglevel = INFO


  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

}

akka.actor.warn-about-java-serializer-usage = no


//accept {
//  adapt {
//    app = cluster
//    systemname = "SingleNodeClusterSystem"
//    ingest.minsubscribers = 1
//  }
//
//
//  akka {
//    version = 2.4.18
//    http.server {
//      interface = "0.0.0.0"
//      port = 8080
//    }
//    actor {
//      provider = "cluster"
//    }
//    kafka.producer {
//      close-timeout = 60s
//      kafka-clients {
//      }
//    }
//    cluster {
//      protocol-prefix = "akka.tcp://"
//      seed-nodes = [
//        "akka.tcp://"${accept.adapt.systemname}"@127.0.0.1:2551"
//      ]
//      roles = ["db", "ingest", "ui", "accept"]
//      min-nr-of-members = 1
//    }
//    remote {
//      log-remote-lifecycle-events = off
//      netty.tcp {
//        hostname = "127.0.0.1"
//        port = 2551
//        message-frame-size =  1000000b
//        send-buffer-size =  1000000b
//        receive-buffer-size =  1000000b
//        maximum-frame-size = 1000000b
//      }
//      maximum-payload-bytes = 1000000 bytes
//    }
//    loglevel = ERROR
//  }
//
//  akka.actor.warn-about-java-serializer-usage = no
//}
//
//dev {
//  adapt {
//    app = cluster
//    systemname = "SingleNodeClusterSystem"
//    ingest.minsubscribers = 1
//  }
//
//
//  akka {
//    version = 2.4.18
//    http.server {
//      interface = "0.0.0.0"
//      port = 8080
//    }
//    kafka.producer {
//      close-timeout = 60s
//      kafka-clients {
//      }
//    }
//    actor {
//      provider = "cluster"
//    }
//    cluster {
//      protocol-prefix = "akka.tcp://"
//      seed-nodes = [
//        "akka.tcp://"${dev.adapt.systemname}"@127.0.0.1:2551"
//      ]
//      roles = ${adapt.roles}
//      min-nr-of-members = 1
//    }
//    remote {
//      log-remote-lifecycle-events = off
//      netty.tcp {
//        hostname = "127.0.0.1"
//        port = 2551
//        message-frame-size =  1000000b
//        send-buffer-size =  1000000b
//        receive-buffer-size =  1000000b
//        maximum-frame-size = 1000000b
//      }
//      maximum-payload-bytes = 1000000 bytes
//    }
//    loglevel = INFO
//  }
//
//  akka.actor.warn-about-java-serializer-usage = no
//}

