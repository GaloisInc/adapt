/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Events represent actions executed by subjects on data objects
     * or other subjects.  Events are generally system calls, but
     * could also include function calls, instruction executions, or
     * even more abstract notions. Events are the core entity in the
     * data model and they are the main abstraction for representing
     * information flow between data objects and subjects. */
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8405409307446814992L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Events represent actions executed by subjects on data objects\\n     * or other subjects.  Events are generally system calls, but\\n     * could also include function calls, instruction executions, or\\n     * even more abstract notions. Events are the core entity in the\\n     * data model and they are the main abstraction for representing\\n     * information flow between data objects and subjects.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A universally unique identifier for the event\"},{\"name\":\"sequence\",\"type\":\"long\",\"doc\":\"A logical sequence number for ordering events relative to each other within a subject's execution context\",\"default\":0},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"doc\":\"* EventType enumerates the most common system calls. Since there\\n     * are hundreds of possible system calls, enumerating all of them\\n     * and managing the list across OS versions is a\\n     * challenge. EVENT_OTHER is the catch all for events not enumerated here. Any events\\n     * that are expected to be of importance, should be included in this list.\",\"symbols\":[\"EVENT_ACCEPT\",\"EVENT_BIND\",\"EVENT_BLIND\",\"EVENT_CHANGE_PRINCIPAL\",\"EVENT_CHECK_FILE_ATTRIBUTES\",\"EVENT_CLONE\",\"EVENT_CLOSE\",\"EVENT_CONNECT\",\"EVENT_CREATE_OBJECT\",\"EVENT_CREATE_THREAD\",\"EVENT_DUP\",\"EVENT_EXECUTE\",\"EVENT_FNCTL\",\"EVENT_FORK\",\"EVENT_LINK\",\"EVENT_LSEEK\",\"EVENT_MMAP\",\"EVENT_MODIFY_FILE_ATTRIBUTES\",\"EVENT_MODIFY_PROCESS\",\"EVENT_MPROTECT\",\"EVENT_OPEN\",\"EVENT_OTHER\",\"EVENT_READ\",\"EVENT_RECVFROM\",\"EVENT_RECVMSG\",\"EVENT_RENAME\",\"EVENT_SENDTO\",\"EVENT_SENDMSG\",\"EVENT_SHM\",\"EVENT_SIGNAL\",\"EVENT_TRUNCATE\",\"EVENT_UNIT\",\"EVENT_UNLINK\",\"EVENT_UPDATE\",\"EVENT_WAIT\",\"EVENT_WRITE\",\"EVENT_EXIT\",\"EVENT_LOADLIBRARY\",\"EVENT_BOOT\",\"EVENT_LOGCLEAR\",\"EVENT_MOUNT\",\"EVENT_STARTSERVICE\",\"EVENT_LOGIN\",\"EVENT_LOGOUT\"]},\"doc\":\"The type of the event\"},{\"name\":\"threadId\",\"type\":\"int\",\"doc\":\"The thread id to which this event belongs\"},{\"name\":\"subject\",\"type\":\"UUID\",\"doc\":\"UUID of Subject that generated this event\"},{\"name\":\"predicateObject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* UUID of Object/Subject this event acts on. For events that\\n         * have two arguments, this attribute contains the first\\n         * argument. This attribute is optional because it may not be\\n         * relevant for some events.\",\"default\":null},{\"name\":\"predicateObjectPath\",\"type\":[\"null\",\"string\"],\"doc\":\"If applicable, the object's absolute file path (Optional)\",\"default\":null},{\"name\":\"predicateObject2\",\"type\":[\"null\",\"UUID\"],\"doc\":\"Optional UUID of Object/Subject for events that take two\\n         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.\",\"default\":null},{\"name\":\"predicateObject2Path\",\"type\":[\"null\",\"string\"],\"doc\":\"If applicable, the second object's absolute file path (Optional)\",\"default\":null},{\"name\":\"timestampNanos\",\"type\":\"long\",\"doc\":\"* The time at which the event occurred. Timestamps allow\\n         * reasoning about order of events on a host when the same\\n         * clock is used. A timestamp stores the number of nanoseconds\\n         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\\n         *\\n         * TODO: When different clocks are used on a host or across\\n         * hosts, we need to also define a clock source\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Event name (Optional)\",\"default\":null},{\"name\":\"parameters\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Value\",\"doc\":\"* Values represent transient data, mainly parameters to\\n     * events. Values are created and used once within an event's\\n     * execution and are relevant mainly during fine-grained tracking\\n     * (such as with tag/taint propagation).  Values have tags\\n     * describing their provenance. Sometimes the actual value's value\\n     * is reported in addition to the value's metadata\\n     *\\n     * The size of the value is the number of elements of type\\n     * valueDataType. This should be -1 for primitive and complex\\n     * types.  For arrays, the size is the array length. i.e., if\\n     * size >= 0, then this value is an array.  A complex value (such as\\n     * an object) can contain other values (primitives or other\\n     * complex values) within it, as components.\\n     *\\n     * Examples: <br>\\n     *\\n     * an integer will have size=-1 and valueDataType=INT, and\\n     * valueBytes.length=4 bytes <br>\\n     *\\n     * an int[4] will have size=4 and valueDataType=INT, and\\n     * valueBytes.length=16 bytes (4*4) <br>\\n     *\\n     * a string s=\\\"abc\\\" has size=3 and valueDataType=CHAR, and\\n     * valueBytes.length=12 bytes (UTF32_BE encoding; 4 bytes per\\n     * char) <br>\\n     *\\n     * an MyClass obj has size=-1, valueDataType=COMPLEX,\\n     * runtimeDataType=\\\"MyClass\\\", valueBytes=<pointer> <br>\",\"fields\":[{\"name\":\"size\",\"type\":\"int\",\"doc\":\"The size of the value: the number of elements of type valueDataType; -1 for non-arrays\",\"default\":-1},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ValueType\",\"doc\":\"* A value type is either source, sink, or control This is for\\n     * Event parameters to distinguish source/sink values vs control\\n     * parameters (such as a file descriptor).\",\"symbols\":[\"VALUE_TYPE_SRC\",\"VALUE_TYPE_SINK\",\"VALUE_TYPE_CONTROL\"]},\"doc\":\"The type indicates whether it's a source, sink, or control value\"},{\"name\":\"valueDataType\",\"type\":{\"type\":\"enum\",\"name\":\"ValueDataType\",\"doc\":\"* A value data type is one of the primitive data types. A string is treated as a char array\",\"symbols\":[\"VALUE_DATA_TYPE_BYTE\",\"VALUE_DATA_TYPE_BOOL\",\"VALUE_DATA_TYPE_CHAR\",\"VALUE_DATA_TYPE_SHORT\",\"VALUE_DATA_TYPE_INT\",\"VALUE_DATA_TYPE_FLOAT\",\"VALUE_DATA_TYPE_LONG\",\"VALUE_DATA_TYPE_DOUBLE\",\"VALUE_DATA_TYPE_COMPLEX\"]},\"doc\":\"The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)\\n         *  Strings are treated as char[] so type=CHAR\\n         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])\\n         *  Complex composite objects comprising of primitive values use the COMPLEX type\"},{\"name\":\"isNull\",\"type\":\"boolean\",\"doc\":\"Whether this value is null, needed to indicate null objects (default: false)\",\"default\":false},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"the name of the Value, string. (Optional)\",\"default\":null},{\"name\":\"runtimeDataType\",\"type\":[\"null\",\"string\"],\"doc\":\"The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have\\n         *  a runtime data type of say \\\"MyClass\\\"\",\"default\":null},{\"name\":\"valueBytes\",\"type\":[\"null\",\"bytes\"],\"doc\":\"* The actual bytes of the value in Big Endian format, e.g.,\\n         * an int is converted to a 4 byte buffer (Optional)\\n         *\\n         * Strings are represented as an array of UTF32_BE encoded\\n         * characters (i.e., 4 bytes per char)\",\"default\":null},{\"name\":\"tag\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TagRunLengthTuple\",\"doc\":\"* This record is a single tuple in a run length encoding of tags\",\"fields\":[{\"name\":\"numValueElements\",\"type\":\"int\",\"default\":0},{\"name\":\"tagId\",\"type\":\"UUID\"}]}}],\"doc\":\"* The value's tag expression describing its provenance (Optional)\\n         * Since value could be an array, the tag can use run length encoding if needed.\",\"default\":null},{\"name\":\"components\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Value\"}],\"doc\":\"A complex value might comprise other component values if needed (Optional)\",\"default\":null}]}}],\"doc\":\"Event parameters represented as values, see Value (Optional)\",\"default\":null},{\"name\":\"location\",\"type\":[\"null\",\"long\"],\"doc\":\"Location refers to the location of the data affecting the event\\n         *  (e.g., the read offset in the file for the read system call event). (Optional)\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"Size refers to the size of the data affecting the event\\n         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)\",\"default\":null},{\"name\":\"programPoint\",\"type\":[\"null\",\"string\"],\"doc\":\"The program point where the ","event was triggered (e.g., executable and line number). (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A universally unique identifier for the event */
  @Deprecated public com.bbn.tc.schema.avro.UUID uuid;
  /** A logical sequence number for ordering events relative to each other within a subject's execution context */
  @Deprecated public long sequence;
  /** The type of the event */
  @Deprecated public com.bbn.tc.schema.avro.EventType type;
  /** The thread id to which this event belongs */
  @Deprecated public int threadId;
  /** UUID of Subject that generated this event */
  @Deprecated public com.bbn.tc.schema.avro.UUID subject;
  /** * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events. */
  @Deprecated public com.bbn.tc.schema.avro.UUID predicateObject;
  /** If applicable, the object's absolute file path (Optional) */
  @Deprecated public java.lang.CharSequence predicateObjectPath;
  /** Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument. */
  @Deprecated public com.bbn.tc.schema.avro.UUID predicateObject2;
  /** If applicable, the second object's absolute file path (Optional) */
  @Deprecated public java.lang.CharSequence predicateObject2Path;
  /** * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source */
  @Deprecated public long timestampNanos;
  /** Event name (Optional) */
  @Deprecated public java.lang.CharSequence name;
  /** Event parameters represented as values, see Value (Optional) */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.Value> parameters;
  /** Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional) */
  @Deprecated public java.lang.Long location;
  /** Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional) */
  @Deprecated public java.lang.Long size;
  /** The program point where the event was triggered (e.g., executable and line number). (Optional) */
  @Deprecated public java.lang.CharSequence programPoint;
  /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param uuid A universally unique identifier for the event
   * @param sequence A logical sequence number for ordering events relative to each other within a subject's execution context
   * @param type The type of the event
   * @param threadId The thread id to which this event belongs
   * @param subject UUID of Subject that generated this event
   * @param predicateObject * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
   * @param predicateObjectPath If applicable, the object's absolute file path (Optional)
   * @param predicateObject2 Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
   * @param predicateObject2Path If applicable, the second object's absolute file path (Optional)
   * @param timestampNanos * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
   * @param name Event name (Optional)
   * @param parameters Event parameters represented as values, see Value (Optional)
   * @param location Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
   * @param size Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
   * @param programPoint The program point where the event was triggered (e.g., executable and line number). (Optional)
   * @param properties * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public Event(com.bbn.tc.schema.avro.UUID uuid, java.lang.Long sequence, com.bbn.tc.schema.avro.EventType type, java.lang.Integer threadId, com.bbn.tc.schema.avro.UUID subject, com.bbn.tc.schema.avro.UUID predicateObject, java.lang.CharSequence predicateObjectPath, com.bbn.tc.schema.avro.UUID predicateObject2, java.lang.CharSequence predicateObject2Path, java.lang.Long timestampNanos, java.lang.CharSequence name, java.util.List<com.bbn.tc.schema.avro.Value> parameters, java.lang.Long location, java.lang.Long size, java.lang.CharSequence programPoint, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.uuid = uuid;
    this.sequence = sequence;
    this.type = type;
    this.threadId = threadId;
    this.subject = subject;
    this.predicateObject = predicateObject;
    this.predicateObjectPath = predicateObjectPath;
    this.predicateObject2 = predicateObject2;
    this.predicateObject2Path = predicateObject2Path;
    this.timestampNanos = timestampNanos;
    this.name = name;
    this.parameters = parameters;
    this.location = location;
    this.size = size;
    this.programPoint = programPoint;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return sequence;
    case 2: return type;
    case 3: return threadId;
    case 4: return subject;
    case 5: return predicateObject;
    case 6: return predicateObjectPath;
    case 7: return predicateObject2;
    case 8: return predicateObject2Path;
    case 9: return timestampNanos;
    case 10: return name;
    case 11: return parameters;
    case 12: return location;
    case 13: return size;
    case 14: return programPoint;
    case 15: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 1: sequence = (java.lang.Long)value$; break;
    case 2: type = (com.bbn.tc.schema.avro.EventType)value$; break;
    case 3: threadId = (java.lang.Integer)value$; break;
    case 4: subject = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 5: predicateObject = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 6: predicateObjectPath = (java.lang.CharSequence)value$; break;
    case 7: predicateObject2 = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 8: predicateObject2Path = (java.lang.CharSequence)value$; break;
    case 9: timestampNanos = (java.lang.Long)value$; break;
    case 10: name = (java.lang.CharSequence)value$; break;
    case 11: parameters = (java.util.List<com.bbn.tc.schema.avro.Value>)value$; break;
    case 12: location = (java.lang.Long)value$; break;
    case 13: size = (java.lang.Long)value$; break;
    case 14: programPoint = (java.lang.CharSequence)value$; break;
    case 15: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return A universally unique identifier for the event
   */
  public com.bbn.tc.schema.avro.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * A universally unique identifier for the event
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   * @return A logical sequence number for ordering events relative to each other within a subject's execution context
   */
  public java.lang.Long getSequence() {
    return sequence;
  }

  /**
   * Sets the value of the 'sequence' field.
   * A logical sequence number for ordering events relative to each other within a subject's execution context
   * @param value the value to set.
   */
  public void setSequence(java.lang.Long value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of the event
   */
  public com.bbn.tc.schema.avro.EventType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of the event
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.EventType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'threadId' field.
   * @return The thread id to which this event belongs
   */
  public java.lang.Integer getThreadId() {
    return threadId;
  }

  /**
   * Sets the value of the 'threadId' field.
   * The thread id to which this event belongs
   * @param value the value to set.
   */
  public void setThreadId(java.lang.Integer value) {
    this.threadId = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return UUID of Subject that generated this event
   */
  public com.bbn.tc.schema.avro.UUID getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * UUID of Subject that generated this event
   * @param value the value to set.
   */
  public void setSubject(com.bbn.tc.schema.avro.UUID value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'predicateObject' field.
   * @return * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
   */
  public com.bbn.tc.schema.avro.UUID getPredicateObject() {
    return predicateObject;
  }

  /**
   * Sets the value of the 'predicateObject' field.
   * * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
   * @param value the value to set.
   */
  public void setPredicateObject(com.bbn.tc.schema.avro.UUID value) {
    this.predicateObject = value;
  }

  /**
   * Gets the value of the 'predicateObjectPath' field.
   * @return If applicable, the object's absolute file path (Optional)
   */
  public java.lang.CharSequence getPredicateObjectPath() {
    return predicateObjectPath;
  }

  /**
   * Sets the value of the 'predicateObjectPath' field.
   * If applicable, the object's absolute file path (Optional)
   * @param value the value to set.
   */
  public void setPredicateObjectPath(java.lang.CharSequence value) {
    this.predicateObjectPath = value;
  }

  /**
   * Gets the value of the 'predicateObject2' field.
   * @return Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
   */
  public com.bbn.tc.schema.avro.UUID getPredicateObject2() {
    return predicateObject2;
  }

  /**
   * Sets the value of the 'predicateObject2' field.
   * Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
   * @param value the value to set.
   */
  public void setPredicateObject2(com.bbn.tc.schema.avro.UUID value) {
    this.predicateObject2 = value;
  }

  /**
   * Gets the value of the 'predicateObject2Path' field.
   * @return If applicable, the second object's absolute file path (Optional)
   */
  public java.lang.CharSequence getPredicateObject2Path() {
    return predicateObject2Path;
  }

  /**
   * Sets the value of the 'predicateObject2Path' field.
   * If applicable, the second object's absolute file path (Optional)
   * @param value the value to set.
   */
  public void setPredicateObject2Path(java.lang.CharSequence value) {
    this.predicateObject2Path = value;
  }

  /**
   * Gets the value of the 'timestampNanos' field.
   * @return * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
   */
  public java.lang.Long getTimestampNanos() {
    return timestampNanos;
  }

  /**
   * Sets the value of the 'timestampNanos' field.
   * * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
   * @param value the value to set.
   */
  public void setTimestampNanos(java.lang.Long value) {
    this.timestampNanos = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Event name (Optional)
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Event name (Optional)
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return Event parameters represented as values, see Value (Optional)
   */
  public java.util.List<com.bbn.tc.schema.avro.Value> getParameters() {
    return parameters;
  }

  /**
   * Sets the value of the 'parameters' field.
   * Event parameters represented as values, see Value (Optional)
   * @param value the value to set.
   */
  public void setParameters(java.util.List<com.bbn.tc.schema.avro.Value> value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
   */
  public java.lang.Long getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
   * @param value the value to set.
   */
  public void setLocation(java.lang.Long value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
   */
  public java.lang.Long getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
   * @param value the value to set.
   */
  public void setSize(java.lang.Long value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'programPoint' field.
   * @return The program point where the event was triggered (e.g., executable and line number). (Optional)
   */
  public java.lang.CharSequence getProgramPoint() {
    return programPoint;
  }

  /**
   * Sets the value of the 'programPoint' field.
   * The program point where the event was triggered (e.g., executable and line number). (Optional)
   * @param value the value to set.
   */
  public void setProgramPoint(java.lang.CharSequence value) {
    this.programPoint = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Event.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Event.Builder newBuilder(com.bbn.tc.schema.avro.Event.Builder other) {
    return new com.bbn.tc.schema.avro.Event.Builder(other);
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Event.Builder newBuilder(com.bbn.tc.schema.avro.Event other) {
    return new com.bbn.tc.schema.avro.Event.Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    /** A universally unique identifier for the event */
    private com.bbn.tc.schema.avro.UUID uuid;
    /** A logical sequence number for ordering events relative to each other within a subject's execution context */
    private long sequence;
    /** The type of the event */
    private com.bbn.tc.schema.avro.EventType type;
    /** The thread id to which this event belongs */
    private int threadId;
    /** UUID of Subject that generated this event */
    private com.bbn.tc.schema.avro.UUID subject;
    /** * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events. */
    private com.bbn.tc.schema.avro.UUID predicateObject;
    /** If applicable, the object's absolute file path (Optional) */
    private java.lang.CharSequence predicateObjectPath;
    /** Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument. */
    private com.bbn.tc.schema.avro.UUID predicateObject2;
    /** If applicable, the second object's absolute file path (Optional) */
    private java.lang.CharSequence predicateObject2Path;
    /** * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source */
    private long timestampNanos;
    /** Event name (Optional) */
    private java.lang.CharSequence name;
    /** Event parameters represented as values, see Value (Optional) */
    private java.util.List<com.bbn.tc.schema.avro.Value> parameters;
    /** Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional) */
    private java.lang.Long location;
    /** Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional) */
    private java.lang.Long size;
    /** The program point where the event was triggered (e.g., executable and line number). (Optional) */
    private java.lang.CharSequence programPoint;
    /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.threadId)) {
        this.threadId = data().deepCopy(fields()[3].schema(), other.threadId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subject)) {
        this.subject = data().deepCopy(fields()[4].schema(), other.subject);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.predicateObject)) {
        this.predicateObject = data().deepCopy(fields()[5].schema(), other.predicateObject);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.predicateObjectPath)) {
        this.predicateObjectPath = data().deepCopy(fields()[6].schema(), other.predicateObjectPath);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.predicateObject2)) {
        this.predicateObject2 = data().deepCopy(fields()[7].schema(), other.predicateObject2);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.predicateObject2Path)) {
        this.predicateObject2Path = data().deepCopy(fields()[8].schema(), other.predicateObject2Path);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.timestampNanos)) {
        this.timestampNanos = data().deepCopy(fields()[9].schema(), other.timestampNanos);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.name)) {
        this.name = data().deepCopy(fields()[10].schema(), other.name);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.parameters)) {
        this.parameters = data().deepCopy(fields()[11].schema(), other.parameters);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.location)) {
        this.location = data().deepCopy(fields()[12].schema(), other.location);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.size)) {
        this.size = data().deepCopy(fields()[13].schema(), other.size);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.programPoint)) {
        this.programPoint = data().deepCopy(fields()[14].schema(), other.programPoint);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.properties)) {
        this.properties = data().deepCopy(fields()[15].schema(), other.properties);
        fieldSetFlags()[15] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.threadId)) {
        this.threadId = data().deepCopy(fields()[3].schema(), other.threadId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subject)) {
        this.subject = data().deepCopy(fields()[4].schema(), other.subject);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.predicateObject)) {
        this.predicateObject = data().deepCopy(fields()[5].schema(), other.predicateObject);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.predicateObjectPath)) {
        this.predicateObjectPath = data().deepCopy(fields()[6].schema(), other.predicateObjectPath);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.predicateObject2)) {
        this.predicateObject2 = data().deepCopy(fields()[7].schema(), other.predicateObject2);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.predicateObject2Path)) {
        this.predicateObject2Path = data().deepCopy(fields()[8].schema(), other.predicateObject2Path);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.timestampNanos)) {
        this.timestampNanos = data().deepCopy(fields()[9].schema(), other.timestampNanos);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.name)) {
        this.name = data().deepCopy(fields()[10].schema(), other.name);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.parameters)) {
        this.parameters = data().deepCopy(fields()[11].schema(), other.parameters);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.location)) {
        this.location = data().deepCopy(fields()[12].schema(), other.location);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.size)) {
        this.size = data().deepCopy(fields()[13].schema(), other.size);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.programPoint)) {
        this.programPoint = data().deepCopy(fields()[14].schema(), other.programPoint);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.properties)) {
        this.properties = data().deepCopy(fields()[15].schema(), other.properties);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * A universally unique identifier for the event
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * A universally unique identifier for the event
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setUuid(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * A universally unique identifier for the event
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * A universally unique identifier for the event
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequence' field.
      * A logical sequence number for ordering events relative to each other within a subject's execution context
      * @return The value.
      */
    public java.lang.Long getSequence() {
      return sequence;
    }

    /**
      * Sets the value of the 'sequence' field.
      * A logical sequence number for ordering events relative to each other within a subject's execution context
      * @param value The value of 'sequence'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setSequence(long value) {
      validate(fields()[1], value);
      this.sequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequence' field has been set.
      * A logical sequence number for ordering events relative to each other within a subject's execution context
      * @return True if the 'sequence' field has been set, false otherwise.
      */
    public boolean hasSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequence' field.
      * A logical sequence number for ordering events relative to each other within a subject's execution context
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearSequence() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the event
      * @return The value.
      */
    public com.bbn.tc.schema.avro.EventType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the event
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setType(com.bbn.tc.schema.avro.EventType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the event
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the event
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'threadId' field.
      * The thread id to which this event belongs
      * @return The value.
      */
    public java.lang.Integer getThreadId() {
      return threadId;
    }

    /**
      * Sets the value of the 'threadId' field.
      * The thread id to which this event belongs
      * @param value The value of 'threadId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setThreadId(int value) {
      validate(fields()[3], value);
      this.threadId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'threadId' field has been set.
      * The thread id to which this event belongs
      * @return True if the 'threadId' field has been set, false otherwise.
      */
    public boolean hasThreadId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'threadId' field.
      * The thread id to which this event belongs
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearThreadId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * UUID of Subject that generated this event
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getSubject() {
      return subject;
    }

    /**
      * Sets the value of the 'subject' field.
      * UUID of Subject that generated this event
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setSubject(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[4], value);
      this.subject = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * UUID of Subject that generated this event
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subject' field.
      * UUID of Subject that generated this event
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'predicateObject' field.
      * * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getPredicateObject() {
      return predicateObject;
    }

    /**
      * Sets the value of the 'predicateObject' field.
      * * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
      * @param value The value of 'predicateObject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setPredicateObject(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[5], value);
      this.predicateObject = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'predicateObject' field has been set.
      * * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
      * @return True if the 'predicateObject' field has been set, false otherwise.
      */
    public boolean hasPredicateObject() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'predicateObject' field.
      * * UUID of Object/Subject this event acts on. For events that
         * have two arguments, this attribute contains the first
         * argument. This attribute is optional because it may not be
         * relevant for some events.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearPredicateObject() {
      predicateObject = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'predicateObjectPath' field.
      * If applicable, the object's absolute file path (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getPredicateObjectPath() {
      return predicateObjectPath;
    }

    /**
      * Sets the value of the 'predicateObjectPath' field.
      * If applicable, the object's absolute file path (Optional)
      * @param value The value of 'predicateObjectPath'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setPredicateObjectPath(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.predicateObjectPath = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'predicateObjectPath' field has been set.
      * If applicable, the object's absolute file path (Optional)
      * @return True if the 'predicateObjectPath' field has been set, false otherwise.
      */
    public boolean hasPredicateObjectPath() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'predicateObjectPath' field.
      * If applicable, the object's absolute file path (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearPredicateObjectPath() {
      predicateObjectPath = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'predicateObject2' field.
      * Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getPredicateObject2() {
      return predicateObject2;
    }

    /**
      * Sets the value of the 'predicateObject2' field.
      * Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
      * @param value The value of 'predicateObject2'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setPredicateObject2(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[7], value);
      this.predicateObject2 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'predicateObject2' field has been set.
      * Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
      * @return True if the 'predicateObject2' field has been set, false otherwise.
      */
    public boolean hasPredicateObject2() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'predicateObject2' field.
      * Optional UUID of Object/Subject for events that take two
         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearPredicateObject2() {
      predicateObject2 = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'predicateObject2Path' field.
      * If applicable, the second object's absolute file path (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getPredicateObject2Path() {
      return predicateObject2Path;
    }

    /**
      * Sets the value of the 'predicateObject2Path' field.
      * If applicable, the second object's absolute file path (Optional)
      * @param value The value of 'predicateObject2Path'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setPredicateObject2Path(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.predicateObject2Path = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'predicateObject2Path' field has been set.
      * If applicable, the second object's absolute file path (Optional)
      * @return True if the 'predicateObject2Path' field has been set, false otherwise.
      */
    public boolean hasPredicateObject2Path() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'predicateObject2Path' field.
      * If applicable, the second object's absolute file path (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearPredicateObject2Path() {
      predicateObject2Path = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampNanos' field.
      * * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
      * @return The value.
      */
    public java.lang.Long getTimestampNanos() {
      return timestampNanos;
    }

    /**
      * Sets the value of the 'timestampNanos' field.
      * * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
      * @param value The value of 'timestampNanos'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setTimestampNanos(long value) {
      validate(fields()[9], value);
      this.timestampNanos = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampNanos' field has been set.
      * * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
      * @return True if the 'timestampNanos' field has been set, false otherwise.
      */
    public boolean hasTimestampNanos() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'timestampNanos' field.
      * * The time at which the event occurred. Timestamps allow
         * reasoning about order of events on a host when the same
         * clock is used. A timestamp stores the number of nanoseconds
         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * TODO: When different clocks are used on a host or across
         * hosts, we need to also define a clock source
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearTimestampNanos() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Event name (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Event name (Optional)
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.name = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Event name (Optional)
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'name' field.
      * Event name (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearName() {
      name = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * Event parameters represented as values, see Value (Optional)
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.Value> getParameters() {
      return parameters;
    }

    /**
      * Sets the value of the 'parameters' field.
      * Event parameters represented as values, see Value (Optional)
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setParameters(java.util.List<com.bbn.tc.schema.avro.Value> value) {
      validate(fields()[11], value);
      this.parameters = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * Event parameters represented as values, see Value (Optional)
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'parameters' field.
      * Event parameters represented as values, see Value (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
      * @return The value.
      */
    public java.lang.Long getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setLocation(java.lang.Long value) {
      validate(fields()[12], value);
      this.location = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'location' field.
      * Location refers to the location of the data affecting the event
         *  (e.g., the read offset in the file for the read system call event). (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearLocation() {
      location = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
      * @return The value.
      */
    public java.lang.Long getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setSize(java.lang.Long value) {
      validate(fields()[13], value);
      this.size = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'size' field.
      * Size refers to the size of the data affecting the event
         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearSize() {
      size = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'programPoint' field.
      * The program point where the event was triggered (e.g., executable and line number). (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getProgramPoint() {
      return programPoint;
    }

    /**
      * Sets the value of the 'programPoint' field.
      * The program point where the event was triggered (e.g., executable and line number). (Optional)
      * @param value The value of 'programPoint'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setProgramPoint(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.programPoint = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'programPoint' field has been set.
      * The program point where the event was triggered (e.g., executable and line number). (Optional)
      * @return True if the 'programPoint' field has been set, false otherwise.
      */
    public boolean hasProgramPoint() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'programPoint' field.
      * The program point where the event was triggered (e.g., executable and line number). (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearProgramPoint() {
      programPoint = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[15], value);
      this.properties = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Event.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public Event build() {
      try {
        Event record = new Event();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[0]);
        record.sequence = fieldSetFlags()[1] ? this.sequence : (java.lang.Long) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.bbn.tc.schema.avro.EventType) defaultValue(fields()[2]);
        record.threadId = fieldSetFlags()[3] ? this.threadId : (java.lang.Integer) defaultValue(fields()[3]);
        record.subject = fieldSetFlags()[4] ? this.subject : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[4]);
        record.predicateObject = fieldSetFlags()[5] ? this.predicateObject : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[5]);
        record.predicateObjectPath = fieldSetFlags()[6] ? this.predicateObjectPath : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.predicateObject2 = fieldSetFlags()[7] ? this.predicateObject2 : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[7]);
        record.predicateObject2Path = fieldSetFlags()[8] ? this.predicateObject2Path : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.timestampNanos = fieldSetFlags()[9] ? this.timestampNanos : (java.lang.Long) defaultValue(fields()[9]);
        record.name = fieldSetFlags()[10] ? this.name : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.parameters = fieldSetFlags()[11] ? this.parameters : (java.util.List<com.bbn.tc.schema.avro.Value>) defaultValue(fields()[11]);
        record.location = fieldSetFlags()[12] ? this.location : (java.lang.Long) defaultValue(fields()[12]);
        record.size = fieldSetFlags()[13] ? this.size : (java.lang.Long) defaultValue(fields()[13]);
        record.programPoint = fieldSetFlags()[14] ? this.programPoint : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.properties = fieldSetFlags()[15] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
