/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * A record representing either a vertex or an edge. This is the top level record that allows
     * us to easily mix the vertices and edges defined above on the wire. */
@org.apache.avro.specific.AvroGenerated
public class TCCDMDatum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5471078624135693387L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TCCDMDatum\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* A record representing either a vertex or an edge. This is the top level record that allows\\n     * us to easily mix the vertices and edges defined above on the wire.\",\"fields\":[{\"name\":\"datum\",\"type\":[{\"type\":\"record\",\"name\":\"Principal\",\"doc\":\"* A principal is a local user\\n     * TODO: extend to include remote principals\\n     * TODO: what happens when the user information changes (are we tracking versions?)\\n     * TODO: Authentication mechanisms: are TA1s providing that information and how?\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A unique id for the principal\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PrincipalType\",\"doc\":\"* PrincipalType identifies the type of user: either local to the\\n     * host, or remote users/systems.\",\"symbols\":[\"PRINCIPAL_LOCAL\",\"PRINCIPAL_REMOTE\"]},\"doc\":\"The type of the principal, local by default\",\"default\":\"PRINCIPAL_LOCAL\"},{\"name\":\"userId\",\"type\":\"string\",\"doc\":\"The operating system identifier associated with the user\"},{\"name\":\"username\",\"type\":[\"null\",\"string\"],\"doc\":\"Human-readable string identifier, such as username (Optional)\",\"default\":null},{\"name\":\"groupIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The ids of the groups which this user is part of\"},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"ProvenanceTagNode\",\"doc\":\"* A provenance tag defines source dependence on specific data sources (inputs).\\n     * A tag identifier is typically bound to a source and used by the tracking system to\\n     * capture dependence on this source input.\\n     *\\n     * ProvenanceTagNode defines one step of provenance for a value\\n     * (i.e., one read from a source or write to a sink), a reference\\n     * to the previous provenance of the value (if any), and the tag\\n     * operation that resulted the tagId of this ProvenanceTagNode\",\"fields\":[{\"name\":\"tagId\",\"type\":\"UUID\",\"doc\":\"Tag ID for this node *\"},{\"name\":\"flowObject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* The UUID of the source or sink object associated with this\\n         * tag. (Optional)\\n         *\\n         * This attribute is optional because if the\\n         * ProvenanceTagNode is simply joining two existing\\n         * provenances (e.g., when two values are added together), there\\n         * is no flow object associated with that definition.\\n         *\"},{\"name\":\"subject\",\"type\":\"UUID\",\"doc\":\"Subject that is performing the src/sink action *\"},{\"name\":\"systemCall\",\"type\":[\"null\",\"string\"],\"doc\":\"System call that read/wrote the data *\",\"default\":null},{\"name\":\"programPoint\",\"type\":[\"null\",\"string\"],\"doc\":\"The program point where the event was triggered (e.g., executable and line number), (Optional)\",\"default\":null},{\"name\":\"prevTagId\",\"type\":[\"null\",\"UUID\"],\"doc\":\"The previous tag for this value *\",\"default\":null},{\"name\":\"opcode\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TagOpCode\",\"doc\":\"* The tag opcode describes the provenance relation i.e., how multiple sources are combined to\\n     * produce the output. We identify the following provenance relations\\n     *\\n     *   TAG_OP_UNION,         the output is the union of its inputs\\n     *   TAG_OP_ENCODE         the output is some encoding of the input\\n     *   TAG_OP_STRONG         this is more qualitative (coarse) saying there is strong dependence\\n     *   TAG_OP_MEDIUM         this is more qualitative (coarse) saying there is medium dependence\\n     *   TAG_OP_WEAK           this is more qualitative (coarse) saying there is weak   dependence\",\"symbols\":[\"TAG_OP_UNION\",\"TAG_OP_ENCODE\",\"TAG_OP_STRONG\",\"TAG_OP_MEDIUM\",\"TAG_OP_WEAK\"]}],\"doc\":\"Tag operation that resulted in the tagId of this ProvenanceTagNode *\",\"default\":null},{\"name\":\"tagIds\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"UUID\"}],\"default\":null},{\"name\":\"itag\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"IntegrityTag\",\"doc\":\"* The integrity tag may be used to specify the initial integrity of an entity,\\n     * or to endorse its content after performing appropriate checking/sanitization.\",\"symbols\":[\"INTEGRITY_UNTRUSTED\",\"INTEGRITY_BENIGN\",\"INTEGRITY_INVULNERABLE\"]}],\"doc\":\"The integrity tag may be used to specify the intial\\n         *  integrity of an entity, or to endorse it content after\\n         *  performing appropriate checking/sanitization.\",\"default\":null},{\"name\":\"ctag\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"ConfidentialityTag\",\"doc\":\"* The confidentiality tag may be used to specify the initial confidentiality of an entity,\\n     * or to declassify its content after performing appropriate checking/sanitization.\",\"symbols\":[\"CONFIDENTIALITY_SECRET\",\"CONFIDENTIALITY_SENSITIVE\",\"CONFIDENTIALITY_PRIVATE\",\"CONFIDENTIALITY_PUBLIC\"]}],\"doc\":\"* The confidentiality tag may be used to specify the initial\\n         * confidentiality of an entity, or to declassify its content\\n         * after performing appropriate checking/sanitization.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"Subject\",\"doc\":\"* Subjects represent execution contexts and include mainly threads and processes. They can be more granular and\\n     * can represent other execution boundaries such as units and blocks if needed.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"universally unique identifier for the subject\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SubjectType\",\"doc\":\"* SubjectType enumerates the types of execution contexts supported.\\n     *\\n     * SUBJECT_PROCESS,    process\\n     * SUBJECT_THREAD,     thread within a process\\n     * SUBJECT_UNIT        so far we only know of TRACE BEEP using this\",\"symbols\":[\"SUBJECT_PROCESS\",\"SUBJECT_THREAD\",\"SUBJECT_UNIT\",\"SUBJECT_BASIC_BLOCK\"]},\"doc\":\"the subject type\"},{\"name\":\"cid\",\"type\":\"int\",\"doc\":\"Context ID: OS process id for type process, thread id for threads\"},{\"name\":\"parentSubject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* parent subject's UUID. For a process, this is a parent\\n         * process. For a thread, this is the process that created the\\n         * thread. Only optional because in some cases the parent not\\n         * be known; null value indicates that the parent is unknown.\",\"default\":null},{\"name\":\"localPrincipal\",\"type\":\"UUID\",\"doc\":\"UUID of local principal that owns this subject\"},{\"name\":\"startTimestampNanos\",\"type\":\"long\",\"doc\":\"* The start time of the subject\\n         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\"},{\"name\":\"unitId\",\"type\":[\"null\",\"int\"],\"doc\":\"unit id for unit based instrumentation (Optional)\",\"default\":null},{\"name\":\"iteration\",\"type\":[\"null\",\"int\"],\"doc\":\"iteration and count are used for distinguishing individual “units” of execution (Optional)\",\"default\":null},{\"name\":\"count\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"cmdLine\",\"type\":[\"null\",\"string\"],\"doc\":\"Process command line arguments including process name (Optional)\",\"default\":null},{\"name\":\"privilegeLevel\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivilegeLevel\",\"doc\":\"* Windows allows Subjects (processes) to have the following\\n     * enumerated privilege levels.\",\"symbols\":[\"LIMITED\",\"ELEVATED\",\"FULL\"]}],\"doc\":\"Windows allows processes to have different privilege levels (Optional)\",\"default\":null},{\"name\":\"importedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"* imported libraries. (Optional). Lists the libraries that\\n         * are expected to be loaded, but may not necessarily\\n         * correspond 1-to-1 with actual load library events because\\n         * some libraries may already be loaded when this event\\n         * occurs.\",\"default\":null},","{\"name\":\"exportedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"exported libraries. (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"FileObject\",\"doc\":\"* Represents a file on the file system. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which\\n     *  could include sockets, files, memory, and any data in general\\n     *  that can be an input and/or output to an event.  This record\\n     *  is intended to be abstract i.e., one should not instantiate an\\n     *  Object but rather instantiate one of its sub types (ie,\\n     *  encapsulating records) FileObject, UnnamedPipeObject,\\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\\n     *  SrcSinkObject.\",\"fields\":[{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"epoch\",\"type\":[\"null\",\"int\"],\"doc\":\"* Used to track when an object is deleted and a new one is\\n         * created with the same identifier. This is useful for when\\n         * UUIDs are based on something not likely to be unique, such\\n         * as file path.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},\"doc\":\"The base object attributes\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FileObjectType\",\"doc\":\"* These types enumerate the types of FileObjects\",\"symbols\":[\"FILE_OBJECT_FILE\",\"FILE_OBJECT_DIR\",\"FILE_OBJECT_NAMED_PIPE\",\"FILE_OBJECT_UNIX_SOCKET\",\"FILE_OBJECT_PEFILE\"]},\"doc\":\"The type of FileObject\"},{\"name\":\"fileDescriptor\",\"type\":[\"null\",\"int\"],\"doc\":\"The file descriptor (Optional)\",\"default\":null},{\"name\":\"localPrincipal\",\"type\":[\"null\",\"UUID\"],\"doc\":\"UUID of local principal that owns this file object.  This\\n         * attribute is optional because there are times when \\n         * the owner of the file may not be known at the time the file\\n         * object is reported (e.g., missed open call). Otherwise,\\n         * the local principal SHOULD be included.\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"* The file size in bytes (Optional). This attribute reports\\n         * the file size at the time the FileObject is created. Since records\\n         * are not updated, changes in file size is trackable via the events\\n         * that changed the file size.\",\"default\":null},{\"name\":\"peInfo\",\"type\":[\"null\",\"string\"],\"doc\":\"* portable execution (PE) info for windows (Optional).\\n         * Note from FiveDirections: We will LIKELY change this type for engagement 3\",\"default\":null},{\"name\":\"hashes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CryptographicHash\",\"doc\":\"* Cryptographic hash records represent one or more cryptographic hashes for\\n     * an object, typically, a FileObject.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"CryptoHashType\",\"doc\":\"Cryptographich hash types\",\"symbols\":[\"MD5\",\"SHA1\",\"SHA256\",\"SHA512\",\"AUTHENTIHASH\",\"SSDEEP\",\"IMPHASH\"]},\"doc\":\"The type of hash used\"},{\"name\":\"hash\",\"type\":\"string\",\"doc\":\"The base64 encoded hash value\"}]}}],\"doc\":\"(Optional) Zero or more cryptographic hashes over the FileObject\",\"default\":null}]},{\"type\":\"record\",\"name\":\"UnnamedPipeObject\",\"doc\":\"* Represents an unnamed pipe. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":\"AbstractObject\",\"doc\":\"The base object attributes\"},{\"name\":\"sourceFileDescriptor\",\"type\":\"int\",\"doc\":\"File descriptors for reading and writing.\"},{\"name\":\"sinkFileDescriptor\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"RegistryKeyObject\",\"doc\":\"* Represents a registry key. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":\"AbstractObject\",\"doc\":\"The base object attributes\"},{\"name\":\"key\",\"type\":\"string\",\"doc\":\"The registry key/path\"},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Value\",\"doc\":\"* Values represent transient data, mainly parameters to\\n     * events. Values are created and used once within an event's\\n     * execution and are relevant mainly during fine-grained tracking\\n     * (such as with tag/taint propagation).  Values have tags\\n     * describing their provenance. Sometimes the actual value's value\\n     * is reported in addition to the value's metadata\\n     *\\n     * The size of the value is the number of elements of type\\n     * valueDataType. This should be -1 for primitive and complex\\n     * types.  For arrays, the size is the array length. i.e., if\\n     * size >= 0, then this value is an array.  A complex value (such as\\n     * an object) can contain other values (primitives or other\\n     * complex values) within it, as components.\\n     *\\n     * Examples: <br>\\n     *\\n     * an integer will have size=-1 and valueDataType=INT, and\\n     * valueBytes.length=4 bytes <br>\\n     *\\n     * an int[4] will have size=4 and valueDataType=INT, and\\n     * valueBytes.length=16 bytes (4*4) <br>\\n     *\\n     * a string s=\\\"abc\\\" has size=3 and valueDataType=CHAR, and\\n     * valueBytes.length=12 bytes (UTF32_BE encoding; 4 bytes per\\n     * char) <br>\\n     *\\n     * an MyClass obj has size=-1, valueDataType=COMPLEX,\\n     * runtimeDataType=\\\"MyClass\\\", valueBytes=<pointer> <br>\",\"fields\":[{\"name\":\"size\",\"type\":\"int\",\"doc\":\"The size of the value: the number of elements of type valueDataType; -1 for non-arrays\",\"default\":-1},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ValueType\",\"doc\":\"* A value type is either source, sink, or control This is for\\n     * Event parameters to distinguish source/sink values vs control\\n     * parameters (such as a file descriptor).\\n     *\\n     *   VALUE_TYPE_SOURCE   A source value to the event\\n     *   VALUE_TYPE_SINK     A sink value from the event\\n     *   VALUE_TYPE_CONTROL  A control value for the event\",\"symbols\":[\"VALUE_TYPE_SRC\",\"VALUE_TYPE_SINK\",\"VALUE_TYPE_CONTROL\"]},\"doc\":\"The type indicates whether it's a source, sink, or control value\"},{\"name\":\"valueDataType\",\"type\":{\"type\":\"enum\",\"name\":\"ValueDataType\",\"doc\":\"* A value data type is one of the primitive data types. A string is treated as a char array\",\"symbols\":[\"VALUE_DATA_TYPE_BYTE\",\"VALUE_DATA_TYPE_BOOL\",\"VALUE_DATA_TYPE_CHAR\",\"VALUE_DATA_TYPE_SHORT\",\"VALUE_DATA_TYPE_INT\",\"VALUE_DATA_TYPE_FLOAT\",\"VALUE_DATA_TYPE_LONG\",\"VALUE_DATA_TYPE_DOUBLE\",\"VALUE_DATA_TYPE_COMPLEX\"]},\"doc\":\"The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)\\n         *  Strings are treated as char[] so type=CHAR\\n         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])\\n         *  Complex composite objects comprising of primitive values use the COMPLEX type\"},{\"name\":\"isNull\",\"type\":\"boolean\",\"doc\":\"Whether this value is null, needed to indicate null objects (default: false)\",\"default\":false},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"the name of the Value, string. (Optional)\",\"default\":null},{\"name\":\"runtimeDataType\",\"type\":[\"null\",\"string\"],\"doc\":\"The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have\\n         *  a runtime data type of say \\\"MyClass\\\"\",\"default\":null},{\"name\":\"valueBytes\",\"type\":[\"null\",\"bytes\"],\"doc\":\"* The actual bytes of the value in Big Endian format, e.g.,\\n         * an int is converted to a 4 byte buffer (Optional)\\n         *\\n ","        * Strings are represented as an array of UTF32_BE encoded\\n         * characters (i.e., 4 bytes per char)\",\"default\":null},{\"name\":\"tag\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TagRunLengthTuple\",\"doc\":\"* This record is a single tuple in a run length encoding of tags\",\"fields\":[{\"name\":\"numValueElements\",\"type\":\"int\",\"default\":0},{\"name\":\"tagId\",\"type\":\"UUID\"}]}}],\"doc\":\"* The value's tag expression describing its provenance (Optional)\\n         * Since value could be an array, the tag can use run length encoding if needed.\",\"default\":null},{\"name\":\"components\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Value\"}],\"doc\":\"A complex value might comprise other component values if needed (Optional)\",\"default\":null}]}],\"doc\":\"The value of the key\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"The entry size in bytes (Optional)\",\"default\":null}]},{\"type\":\"record\",\"name\":\"NetFlowObject\",\"doc\":\"* Represents a network flow object. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":\"AbstractObject\",\"doc\":\"The base object attributes\"},{\"name\":\"localAddress\",\"type\":\"string\",\"doc\":\"The local IP address for this flow\"},{\"name\":\"localPort\",\"type\":\"int\",\"doc\":\"The local network port for this flow\"},{\"name\":\"remoteAddress\",\"type\":\"string\",\"doc\":\"The remote IP address for this flow\"},{\"name\":\"remotePort\",\"type\":\"int\",\"doc\":\"The remote network port for this flow\"},{\"name\":\"ipProtocol\",\"type\":[\"null\",\"int\"],\"doc\":\"The IP protocol number e.g., TCP=6\",\"default\":null},{\"name\":\"fileDescriptor\",\"type\":[\"null\",\"int\"],\"doc\":\"The file descriptor (Optional)\",\"default\":null}]},{\"type\":\"record\",\"name\":\"MemoryObject\",\"doc\":\"* Represents a page in memory. Instantiates an AbstractObject.\\n     * TODO: is memory really an object (with permissions and so on) or is it a transient data?\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":\"AbstractObject\",\"doc\":\"The base object attributes\"},{\"name\":\"memoryAddress\",\"type\":\"long\",\"doc\":\"The memory address\"},{\"name\":\"pageNumber\",\"type\":[\"null\",\"long\"],\"doc\":\"(Optional) decomposed memory addressed into pageNumber and pageOffset\",\"default\":null},{\"name\":\"pageOffset\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"The entry size in bytes (Optional)\",\"default\":null}]},{\"type\":\"record\",\"name\":\"SrcSinkObject\",\"doc\":\"* Represents a generic source or sink on the host device that is can be a file, memory, or netflow.\\n     * This is the most basic representation of a source or sink, basically specifying its type only.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":\"AbstractObject\",\"doc\":\"The base object attributes\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SrcSinkType\",\"doc\":\"* There are many types of sources such as sensors.  The type of a\\n     * sensor could be base (close to hardware) or composite.  This is\\n     * mostly (only?) applicable to the Android platform.  See\\n     * https://source.android.com/devices/sensors/index.html for\\n     * details.\",\"symbols\":[\"SOURCE_ACCELEROMETER\",\"SOURCE_TEMPERATURE\",\"SOURCE_GYROSCOPE\",\"SOURCE_MAGNETIC_FIELD\",\"SOURCE_HEART_RATE\",\"SOURCE_LIGHT\",\"SOURCE_PROXIMITY\",\"SOURCE_PRESSURE\",\"SOURCE_RELATIVE_HUMIDITY\",\"SOURCE_LINEAR_ACCELERATION\",\"SOURCE_MOTION\",\"SOURCE_STEP_DETECTOR\",\"SOURCE_STEP_COUNTER\",\"SOURCE_TILT_DETECTOR\",\"SOURCE_ROTATION_VECTOR\",\"SOURCE_GRAVITY\",\"SOURCE_GEOMAGNETIC_ROTATION_VECTOR\",\"SOURCE_CAMERA\",\"SOURCE_GPS\",\"SOURCE_AUDIO\",\"SOURCE_SYSTEM_PROPERTY\",\"SOURCE_ENV_VARIABLE\",\"SOURCE_ACCESSIBILITY_SERVICE\",\"SOURCE_ACTIVITY_MANAGEMENT\",\"SOURCE_ALARM_SERVICE\",\"SOURCE_ANDROID_TV\",\"SOURCE_AUDIO_IO\",\"SOURCE_BACKUP_MANAGER\",\"SOURCE_BINDER\",\"SOURCE_BLUETOOTH\",\"SOURCE_BOOT_EVENT\",\"SOURCE_BROADCAST_RECEIVER_MANAGEMENT\",\"SOURCE_CLIPBOARD\",\"SOURCE_COMPONENT_MANAGEMENT\",\"SOURCE_CONTENT_PROVIDER\",\"SOURCE_CONTENT_PROVIDER_MANAGEMENT\",\"SOURCE_DATABASE\",\"SOURCE_DEVICE_ADMIN\",\"SOURCE_DEVICE_SEARCH\",\"SOURCE_DEVICE_USER\",\"SOURCE_DISPLAY\",\"SOURCE_DROPBOX\",\"SOURCE_EMAIL\",\"SOURCE_EXPERIMENTAL\",\"SOURCE_FILE\",\"SOURCE_FILE_SYSTEM_MANAGEMENT\",\"SOURCE_FINGERPRINT\",\"SOURCE_FLASHLIGHT\",\"SOURCE_HDMI\",\"SOURCE_IDLE_DOCK_SCREEN\",\"SOURCE_IMS\",\"SOURCE_INFRARED\",\"SOURCE_INSTALLED_PACKAGES\",\"SOURCE_JSSE_TRUST_MANAGER\",\"SOURCE_KEYCHAIN\",\"SOURCE_KEYGUARD\",\"SOURCE_LOCATION\",\"SOURCE_MACHINE_LEARNING\",\"SOURCE_MEDIA_LOCAL_MANAGEMENT\",\"SOURCE_MEDIA_LOCAL_PLAYBACK\",\"SOURCE_MEDIA_NETWORK_CONNECTION\",\"SOURCE_MEDIA_REMOTE_PLAYBACK\",\"SOURCE_NETWORK_MANAGEMENT\",\"SOURCE_NFC\",\"SOURCE_NOTIFICATION\",\"SOURCE_PAC_PROXY\",\"SOURCE_PERMISSIONS\",\"SOURCE_PERSISTANT_DATA\",\"SOURCE_POWER_MANAGEMENT\",\"SOURCE_PRINT_SERVICE\",\"SOURCE_PROCESS_MANAGEMENT\",\"SOURCE_RPC\",\"SOURCE_SCREEN_AUDIO_CAPTURE\",\"SOURCE_SERIAL_PORT\",\"SOURCE_SERVICE_MANAGEMENT\",\"SOURCE_SMS_MMS\",\"SOURCE_SPEECH_INTERACTION\",\"SOURCE_STATUS_BAR\",\"SOURCE_SYNC_FRAMEWORK\",\"SOURCE_TELEPHONY\",\"SOURCE_TEXT_SERVICES\",\"SOURCE_THREADING\",\"SOURCE_TIME_EVENT\",\"SOURCE_UI\",\"SOURCE_UI_AUTOMATION\",\"SOURCE_UI_RPC\",\"SOURCE_UID_EVENT\",\"SOURCE_USAGE_STATS\",\"SOURCE_USB\",\"SOURCE_USER_ACCOUNTS_MANAGEMENT\",\"SOURCE_VIBRATOR\",\"SOURCE_WAKE_LOCK\",\"SOURCE_WALLPAPER_MANAGER\",\"SOURCE_WAP\",\"SOURCE_WEB_BROWSER\",\"SOURCE_WIDGETS\",\"SOURCE_SINK_IPC\"]},\"doc\":\"The type of the object\"},{\"name\":\"fileDescriptor\",\"type\":[\"null\",\"int\"],\"doc\":\"The file descriptor (Optional)\",\"default\":null}]},{\"type\":\"record\",\"name\":\"Event\",\"doc\":\"* Events represent actions executed by subjects on data objects\\n     * or other subjects.  Events are generally system calls, but\\n     * could also include function calls, instruction executions, or\\n     * even more abstract notions. Events are the core entity in the\\n     * data model and they are the main abstraction for representing\\n     * information flow between data objects and subjects.\",\"fields\":[{\"name\":\"uuid\",\"type\":\"UUID\",\"doc\":\"A universally unique identifier for the event\"},{\"name\":\"sequence\",\"type\":\"long\",\"doc\":\"A logical sequence number for ordering events relative to each other within a subject's execution context\",\"default\":0},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"EventType\",\"doc\":\"* EventType enumerates the most common system calls. Since there\\n     * are hundreds of possible system calls, enumerating all of them\\n     * and managing the list across OS versions is a\\n     * challenge. EVENT_OTHER is the catch all for events not enumerated here. Any events\\n     * that are expected to be of importance, should be included in this list.\\n     *\\n     *   EVENT_ACCEPT                     accept a connection on an object\\n     *   EVENT_BIND                       bind to a network endpoint object\\n     *   EVENT_BLIND                      blind event for a black boxes that are not instrumented\\n     *   EVENT_CHANGE_PRINCIPAL           change the principal associated with the process\\n     *   EVENT_CHECK_FILE_ATTRIBUTES      check the file attributes such as permissions\\n     *   EVENT_CLONE                      clone a subject\\n     *   EVENT_CLOSE                      close an object\\n     *   EVENT_CONNECT                    connect to an object\\n     *   EVENT_CREATE_OBJECT              create an object\\n     *   EVENT_CREATE_THREAD              create a thread subject\\n     *   EVENT_DUP                        duplicate a file descriptor\\n     *   EVENT_EXECUTE                    execute an object\\n     *   EVENT_FNCTL                      manipulate file descriptor\\n     *   EVENT_FORK                       fork a process subject\\n     *   EVENT_LINK                       link an object to a new name\\n     *   EVENT_LSEEK                      reposition read/write file offset\\n     *   EVENT_MMAP                       memory map an object\\n     *   EVENT_MODIFY_FILE_ATTRIBUTES     modify the attributes of a file object\\n     *   EVENT_MPROTECT                   change permissions of a memory object\\n     *   EVENT_OPEN                       open an object\\n     *   EVENT_OTHER                      some other event not enumerated in CDM\\n     *   EVENT_R","EAD                       read from an object (file or socket)\\n     *   EVENT_RECVFROM                   receive message from a socket\\n     *   EVENT_RECVMSG                    receive message from a socket\\n     *   EVENT_RENAME                     rename an object\\n     *   EVENT_SENDTO                     send through socket\\n     *   EVENT_SENDMSG                    send message through socket\\n     *   EVENT_SHM                        share memory between processes\\n     *   EVENT_SIGNAL                     signal another subject\\n     *   EVENT_TRUNCATE                   truncate an object\\n     *   EVENT_UNIT                       create a BEEP unit\\n     *   EVENT_UNLINK                     unlink a name from an object\\n     *   EVENT_UPDATE                     update an object\\n     *   EVENT_WAIT                       wait on another subject\\n     *   EVENT_WRITE                      write to an object (file or socket)\\n     *   EVENT_EXIT                       process exit\\n     *   EVENT_LOADLIBRARY                dynamically loading a library\\n     *   EVENT_BOOT                       indicates the sytem has booted\\n     *   EVENT_LOGCLEAR                   indicates a system log has been cleared\\n     *   EVENT_MOUNT                      indicates the mounting of a device\\n     *   EVENT_STARTSERVICE               indicates a service has started\\n     *   EVENT_LOGIN                      a subject has logged in\\n     *   EVENT_LOGOUT                     a subject has logged out\",\"symbols\":[\"EVENT_ACCEPT\",\"EVENT_BIND\",\"EVENT_BLIND\",\"EVENT_CHANGE_PRINCIPAL\",\"EVENT_CHECK_FILE_ATTRIBUTES\",\"EVENT_CLONE\",\"EVENT_CLOSE\",\"EVENT_CONNECT\",\"EVENT_CREATE_OBJECT\",\"EVENT_CREATE_THREAD\",\"EVENT_DUP\",\"EVENT_EXECUTE\",\"EVENT_FNCTL\",\"EVENT_FORK\",\"EVENT_LINK\",\"EVENT_LSEEK\",\"EVENT_MMAP\",\"EVENT_MODIFY_FILE_ATTRIBUTES\",\"EVENT_MPROTECT\",\"EVENT_OPEN\",\"EVENT_OTHER\",\"EVENT_READ\",\"EVENT_RECVFROM\",\"EVENT_RECVMSG\",\"EVENT_RENAME\",\"EVENT_SENDTO\",\"EVENT_SENDMSG\",\"EVENT_SHM\",\"EVENT_SIGNAL\",\"EVENT_TRUNCATE\",\"EVENT_UNIT\",\"EVENT_UNLINK\",\"EVENT_UPDATE\",\"EVENT_WAIT\",\"EVENT_WRITE\",\"EVENT_EXIT\",\"EVENT_LOADLIBRARY\",\"EVENT_BOOT\",\"EVENT_LOGCLEAR\",\"EVENT_MOUNT\",\"EVENT_STARTSERVICE\",\"EVENT_LOGIN\",\"EVENT_LOGOUT\"]},\"doc\":\"The type of the event\"},{\"name\":\"threadId\",\"type\":\"int\",\"doc\":\"The thread id to which this event belongs\"},{\"name\":\"subject\",\"type\":\"UUID\",\"doc\":\"UUID of Subject that generated this event\"},{\"name\":\"predicateObject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* UUID of Object/Subject this event acts on. For events that\\n         * have two arguments, this attribute contains the first\\n         * argument. This attribute is optional because it may not be\\n         * relevant for some events.\",\"default\":null},{\"name\":\"predicateObjectPath\",\"type\":[\"null\",\"string\"],\"doc\":\"If applicable, the object's absolute file path (Optional)\",\"default\":null},{\"name\":\"predicateObject2\",\"type\":[\"null\",\"UUID\"],\"doc\":\"Optional UUID of Object/Subject for events that take two\\n         *  arguments (e.g., link, rename, etc). This attribute contains the second argument.\",\"default\":null},{\"name\":\"predicateObject2Path\",\"type\":[\"null\",\"string\"],\"doc\":\"If applicable, the second object's absolute file path (Optional)\",\"default\":null},{\"name\":\"timestampNanos\",\"type\":\"long\",\"doc\":\"* The time at which the event occurred. Timestamps allow\\n         * reasoning about order of events on a host when the same\\n         * clock is used. A timestamp stores the number of nanoseconds\\n         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\\n         *\\n         * TODO: When different clocks are used on a host or across\\n         * hosts, we need to also define a clock source\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Event name (Optional)\",\"default\":null},{\"name\":\"parameters\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Value\"}],\"doc\":\"Event parameters represented as values, see Value (Optional)\",\"default\":null},{\"name\":\"location\",\"type\":[\"null\",\"long\"],\"doc\":\"Location refers to the location of the data affecting the event\\n         *  (e.g., the read offset in the file for the read system call event). (Optional)\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"Size refers to the size of the data affecting the event\\n         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)\",\"default\":null},{\"name\":\"programPoint\",\"type\":[\"null\",\"string\"],\"doc\":\"The program point where the event was triggered (e.g., executable and line number). (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},{\"type\":\"record\",\"name\":\"UnitDependency\",\"doc\":\"* This record captures a relationship edge between two units, one\\n     * dependent on the other. This relationship is inferred from a\\n     * combination of underlying events.\",\"fields\":[{\"name\":\"unit\",\"type\":\"UUID\"},{\"name\":\"dependentUnit\",\"type\":\"UUID\"}]},{\"type\":\"record\",\"name\":\"TimeMarker\",\"doc\":\"* TimeMarker records are used to delineate time periods in a data\\n     * stream to help consumers know their current read position in the\\n     * data stream.\",\"fields\":[{\"name\":\"tsNanos\",\"type\":\"long\",\"doc\":\"Timestamp in nanoseconds\"}]}]},{\"name\":\"CDMVersion\",\"type\":\"string\",\"default\":\"15\"},{\"name\":\"source\",\"type\":{\"type\":\"enum\",\"name\":\"InstrumentationSource\",\"doc\":\"* InstrumentationSource identifies the source reporting provenance information.\\n     *\\n     * SOURCE_ANDROID_JAVA_CLEARSCOPE,    from android java instrumentation\\n     * SOURCE_ANDROID_NATIVE_CLEARSCOPE,  from android's native instrumentation\\n     * SOURCE_FREEBSD_OPENBSM_TRACE,      from FreeBSD openBSM\\n     * SOURCE_FREEBSD_DTRACE_CADETS,      from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_TESLA_CADETS,       from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_LOOM_CADETS,        from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_MACIF_CADETS,       from CADETS freebsd instrumentation\\n     * SOURCE_LINUX_AUDIT_TRACE,          from Linux /dev/audit\\n     * SOURCE_LINUX_PROC_TRACE,           from Linux's /proc\\n     * SOURCE_LINUX_BEEP_TRACE,           from BEEP instrumentation\\n     * SOURCE_LINUX_THEIA                 from the GATech THEIA instrumentation source\\n     * SOURCE_WINDOWS_DIFT_FAROS,         from FAROS' DIFT module\\n     * SOURCE_WINDOWS_PSA_FAROS,          from FAROS' PSA module\\n     * SOURCE_WINDOWS_FIVEDIRECTIONS      for the fivedirections windows events\",\"symbols\":[\"SOURCE_ANDROID_JAVA_CLEARSCOPE\",\"SOURCE_ANDROID_NATIVE_CLEARSCOPE\",\"SOURCE_FREEBSD_OPENBSM_TRACE\",\"SOURCE_FREEBSD_DTRACE_CADETS\",\"SOURCE_FREEBSD_TESLA_CADETS\",\"SOURCE_FREEBSD_LOOM_CADETS\",\"SOURCE_FREEBSD_MACIF_CADETS\",\"SOURCE_LINUX_AUDIT_TRACE\",\"SOURCE_LINUX_PROC_TRACE\",\"SOURCE_LINUX_BEEP_TRACE\",\"SOURCE_LINUX_THEIA\",\"SOURCE_WINDOWS_DIFT_FAROS\",\"SOURCE_WINDOWS_PSA_FAROS\",\"SOURCE_WINDOWS_FIVEDIRECTIONS\"]},\"doc\":\"What source generated this record?\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Object datum;
  @Deprecated public java.lang.CharSequence CDMVersion;
  /** What source generated this record? */
  @Deprecated public com.bbn.tc.schema.avro.InstrumentationSource source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TCCDMDatum() {}

  /**
   * All-args constructor.
   * @param datum The new value for datum
   * @param CDMVersion The new value for CDMVersion
   * @param source What source generated this record?
   */
  public TCCDMDatum(java.lang.Object datum, java.lang.CharSequence CDMVersion, com.bbn.tc.schema.avro.InstrumentationSource source) {
    this.datum = datum;
    this.CDMVersion = CDMVersion;
    this.source = source;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return datum;
    case 1: return CDMVersion;
    case 2: return source;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: datum = (java.lang.Object)value$; break;
    case 1: CDMVersion = (java.lang.CharSequence)value$; break;
    case 2: source = (com.bbn.tc.schema.avro.InstrumentationSource)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'datum' field.
   * @return The value of the 'datum' field.
   */
  public java.lang.Object getDatum() {
    return datum;
  }

  /**
   * Sets the value of the 'datum' field.
   * @param value the value to set.
   */
  public void setDatum(java.lang.Object value) {
    this.datum = value;
  }

  /**
   * Gets the value of the 'CDMVersion' field.
   * @return The value of the 'CDMVersion' field.
   */
  public java.lang.CharSequence getCDMVersion() {
    return CDMVersion;
  }

  /**
   * Sets the value of the 'CDMVersion' field.
   * @param value the value to set.
   */
  public void setCDMVersion(java.lang.CharSequence value) {
    this.CDMVersion = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return What source generated this record?
   */
  public com.bbn.tc.schema.avro.InstrumentationSource getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * What source generated this record?
   * @param value the value to set.
   */
  public void setSource(com.bbn.tc.schema.avro.InstrumentationSource value) {
    this.source = value;
  }

  /**
   * Creates a new TCCDMDatum RecordBuilder.
   * @return A new TCCDMDatum RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TCCDMDatum.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.TCCDMDatum.Builder();
  }

  /**
   * Creates a new TCCDMDatum RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TCCDMDatum RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TCCDMDatum.Builder newBuilder(com.bbn.tc.schema.avro.TCCDMDatum.Builder other) {
    return new com.bbn.tc.schema.avro.TCCDMDatum.Builder(other);
  }

  /**
   * Creates a new TCCDMDatum RecordBuilder by copying an existing TCCDMDatum instance.
   * @param other The existing instance to copy.
   * @return A new TCCDMDatum RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TCCDMDatum.Builder newBuilder(com.bbn.tc.schema.avro.TCCDMDatum other) {
    return new com.bbn.tc.schema.avro.TCCDMDatum.Builder(other);
  }

  /**
   * RecordBuilder for TCCDMDatum instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TCCDMDatum>
    implements org.apache.avro.data.RecordBuilder<TCCDMDatum> {

    private java.lang.Object datum;
    private java.lang.CharSequence CDMVersion;
    /** What source generated this record? */
    private com.bbn.tc.schema.avro.InstrumentationSource source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.TCCDMDatum.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.datum)) {
        this.datum = data().deepCopy(fields()[0].schema(), other.datum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CDMVersion)) {
        this.CDMVersion = data().deepCopy(fields()[1].schema(), other.CDMVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TCCDMDatum instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.TCCDMDatum other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.datum)) {
        this.datum = data().deepCopy(fields()[0].schema(), other.datum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CDMVersion)) {
        this.CDMVersion = data().deepCopy(fields()[1].schema(), other.CDMVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'datum' field.
      * @return The value.
      */
    public java.lang.Object getDatum() {
      return datum;
    }

    /**
      * Sets the value of the 'datum' field.
      * @param value The value of 'datum'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder setDatum(java.lang.Object value) {
      validate(fields()[0], value);
      this.datum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'datum' field has been set.
      * @return True if the 'datum' field has been set, false otherwise.
      */
    public boolean hasDatum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'datum' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder clearDatum() {
      datum = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CDMVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getCDMVersion() {
      return CDMVersion;
    }

    /**
      * Sets the value of the 'CDMVersion' field.
      * @param value The value of 'CDMVersion'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder setCDMVersion(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CDMVersion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CDMVersion' field has been set.
      * @return True if the 'CDMVersion' field has been set, false otherwise.
      */
    public boolean hasCDMVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CDMVersion' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder clearCDMVersion() {
      CDMVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * What source generated this record?
      * @return The value.
      */
    public com.bbn.tc.schema.avro.InstrumentationSource getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * What source generated this record?
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder setSource(com.bbn.tc.schema.avro.InstrumentationSource value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * What source generated this record?
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source' field.
      * What source generated this record?
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TCCDMDatum.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TCCDMDatum build() {
      try {
        TCCDMDatum record = new TCCDMDatum();
        record.datum = fieldSetFlags()[0] ? this.datum : (java.lang.Object) defaultValue(fields()[0]);
        record.CDMVersion = fieldSetFlags()[1] ? this.CDMVersion : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (com.bbn.tc.schema.avro.InstrumentationSource) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
