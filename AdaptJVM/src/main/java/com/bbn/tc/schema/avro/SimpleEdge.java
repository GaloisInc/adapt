/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Edges in the CDM only connect the entities and do not have attributes of their own.
     *  In order to make the streaming efficient, the edge specification does not require
     *  the objects on both ends every time it is streamed/serialized. Instead, we defined
     *  the edge to be simple, it has a type and it connects two entities each identified by
     *  a uid each.
     * Since the different edge types in the current model do not have different properties
     *  (actually no properties at all), we do not define the different edges as separate
     *  records at this time.
     * For example, when streaming a large number of edges having the same from node, the
 *  from node in all these edges will be represented using the node id instead of *  having
     *  to replicate the full node object on the wire. */
@org.apache.avro.specific.AvroGenerated
public class SimpleEdge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8621352957937905962L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimpleEdge\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Edges in the CDM only connect the entities and do not have attributes of their own.\\n     *  In order to make the streaming efficient, the edge specification does not require\\n     *  the objects on both ends every time it is streamed/serialized. Instead, we defined\\n     *  the edge to be simple, it has a type and it connects two entities each identified by\\n     *  a uid each.\\n     * Since the different edge types in the current model do not have different properties\\n     *  (actually no properties at all), we do not define the different edges as separate\\n     *  records at this time.\\n     * For example, when streaming a large number of edges having the same from node, the\\n *  from node in all these edges will be represented using the node id instead of *  having\\n     *  to replicate the full node object on the wire.\",\"fields\":[{\"name\":\"fromUuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"A unique id of the From entity on the edge\"},{\"name\":\"toUuid\",\"type\":\"UUID\",\"doc\":\"The id of the To entity on the edge\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"EdgeType\",\"doc\":\"* The different types of simple edges in the CDM\\n     * EDGE_EVENT_AFFECTS_MEMORY          an event affects a memory object (such as updating a memory location)\\n     *   EDGE_EVENT_AFFECTS_FILE            an event affects a file object (such as writing to a file)\\n     * EDGE_EVENT_AFFECTS_REGISTRYKEY     an event affects a registry value (such as writing to a registry key)\\n     *   EDGE_EVENT_AFFECTS_NETFLOW         an event affects a netflow object (such as writing to socket)\\n     * EDGE_EVENT_AFFECTS_SUBJECT         an event affects a subject (such as forking a process)\\n     *   EDGE_EVENT_AFFECTS_SRCSINK         an event affects a generic src/sink object\\n     *   EDGE_EVENT_HASPARENT_EVENT         a metaevent that represents a set of child atomic events\\n     *   EDGE_EVENT_CAUSES_EVENT an event caused/triggered another event\\n     * EDGE_EVENT_ISGENERATEDBY_SUBJECT   an event is generated by a subject (every event is)\\n     *   EDGE_SUBJECT_AFFECTS_EVENT         a subject affects an event (such as when killing a process)\\n     *   EDGE_SUBJECT_HASPARENT_SUBJECT a subject has a parent subject (such as thread has parent process)\\n     * EDGE_SUBJECT_HASPRINCIPAL          a subject has a principal (such as a process owned by a user)\\n     *   EDGE_SUBJECT_RUNSON                a subject runs on a host (TODO: host not yet modeled)\\n     *   EDGE_FILE_AFFECTS_EVENT an event reads from a file\\n     *   EDGE_REGISTRYKEY_AFFECTS_EVENT     an event reads values from a registry key\\n     *   EDGE_NETFLOW_AFFECTS_EVENT         an event reads from a network flow\\n     *   EDGE_MEMORY_AFFECTS_EVENT          an event reads from a memory object\\n     *   EDGE_SRCSINK_AFFECTS_EVENT         a generic source/sink object affects an event\\n     *   EDGE_OBJECT_PREV_VERSION the previous version of an object, typically used for file versioning\\n     * EDGE_FILE_HAS_TAG                  attach a tag to a file object\\n     * EDGE_REGISTRYKEY_HAS_TAG           attach a tag to a registrykey object\\n     * EDGE_NETFLOW_HAS_TAG               attach a tag to a netflow object\\n     * EDGE_MEMORY_HAS_TAG                attach a tag to a memory object\\n     * EDGE_SRCSINK_HAS_TAG               attach a tag to a srcsink object\\n     * EDGE_SUBJECT_HAS_TAG               attach a tag to a subject\\n     * EDGE_EVENT_HAS_TAG                 attach a tag to an event\\n     *\",\"symbols\":[\"EDGE_EVENT_AFFECTS_MEMORY\",\"EDGE_EVENT_AFFECTS_FILE\",\"EDGE_EVENT_AFFECTS_NETFLOW\",\"EDGE_EVENT_AFFECTS_SUBJECT\",\"EDGE_EVENT_AFFECTS_SRCSINK\",\"EDGE_EVENT_HASPARENT_EVENT\",\"EDGE_EVENT_CAUSES_EVENT\",\"EDGE_EVENT_ISGENERATEDBY_SUBJECT\",\"EDGE_SUBJECT_AFFECTS_EVENT\",\"EDGE_SUBJECT_HASPARENT_SUBJECT\",\"EDGE_SUBJECT_HASLOCALPRINCIPAL\",\"EDGE_SUBJECT_RUNSON\",\"EDGE_FILE_AFFECTS_EVENT\",\"EDGE_NETFLOW_AFFECTS_EVENT\",\"EDGE_MEMORY_AFFECTS_EVENT\",\"EDGE_SRCSINK_AFFECTS_EVENT\",\"EDGE_OBJECT_PREV_VERSION\",\"EDGE_FILE_HAS_TAG\",\"EDGE_NETFLOW_HAS_TAG\",\"EDGE_MEMORY_HAS_TAG\",\"EDGE_SRCSINK_HAS_TAG\",\"EDGE_SUBJECT_HAS_TAG\",\"EDGE_EVENT_HAS_TAG\",\"EDGE_EVENT_AFFECTS_REGISTRYKEY\",\"EDGE_REGISTRYKEY_AFFECTS_EVENT\",\"EDGE_REGISTRYKEY_HAS_TAG\"]},\"doc\":\"The type of the edge, see EdgeType\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"* When the edge was created.\\n        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\"},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Arbitrary key, value pairs describing the edge\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A unique id of the From entity on the edge */
  @Deprecated public com.bbn.tc.schema.avro.UUID fromUuid;
  /** The id of the To entity on the edge */
  @Deprecated public com.bbn.tc.schema.avro.UUID toUuid;
  /** The type of the edge, see EdgeType */
  @Deprecated public com.bbn.tc.schema.avro.EdgeType type;
  /** * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC. */
  @Deprecated public long timestamp;
  /** Arbitrary key, value pairs describing the edge */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimpleEdge() {}

  /**
   * All-args constructor.
   * @param fromUuid A unique id of the From entity on the edge
   * @param toUuid The id of the To entity on the edge
   * @param type The type of the edge, see EdgeType
   * @param timestamp * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   * @param properties Arbitrary key, value pairs describing the edge
   */
  public SimpleEdge(com.bbn.tc.schema.avro.UUID fromUuid, com.bbn.tc.schema.avro.UUID toUuid, com.bbn.tc.schema.avro.EdgeType type, java.lang.Long timestamp, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.fromUuid = fromUuid;
    this.toUuid = toUuid;
    this.type = type;
    this.timestamp = timestamp;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fromUuid;
    case 1: return toUuid;
    case 2: return type;
    case 3: return timestamp;
    case 4: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fromUuid = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 1: toUuid = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 2: type = (com.bbn.tc.schema.avro.EdgeType)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fromUuid' field.
   * @return A unique id of the From entity on the edge
   */
  public com.bbn.tc.schema.avro.UUID getFromUuid() {
    return fromUuid;
  }

  /**
   * Sets the value of the 'fromUuid' field.
   * A unique id of the From entity on the edge
   * @param value the value to set.
   */
  public void setFromUuid(com.bbn.tc.schema.avro.UUID value) {
    this.fromUuid = value;
  }

  /**
   * Gets the value of the 'toUuid' field.
   * @return The id of the To entity on the edge
   */
  public com.bbn.tc.schema.avro.UUID getToUuid() {
    return toUuid;
  }

  /**
   * Sets the value of the 'toUuid' field.
   * The id of the To entity on the edge
   * @param value the value to set.
   */
  public void setToUuid(com.bbn.tc.schema.avro.UUID value) {
    this.toUuid = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of the edge, see EdgeType
   */
  public com.bbn.tc.schema.avro.EdgeType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of the edge, see EdgeType
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.EdgeType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Arbitrary key, value pairs describing the edge
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Arbitrary key, value pairs describing the edge
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new SimpleEdge RecordBuilder.
   * @return A new SimpleEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.SimpleEdge.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.SimpleEdge.Builder();
  }

  /**
   * Creates a new SimpleEdge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimpleEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.SimpleEdge.Builder newBuilder(com.bbn.tc.schema.avro.SimpleEdge.Builder other) {
    return new com.bbn.tc.schema.avro.SimpleEdge.Builder(other);
  }

  /**
   * Creates a new SimpleEdge RecordBuilder by copying an existing SimpleEdge instance.
   * @param other The existing instance to copy.
   * @return A new SimpleEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.SimpleEdge.Builder newBuilder(com.bbn.tc.schema.avro.SimpleEdge other) {
    return new com.bbn.tc.schema.avro.SimpleEdge.Builder(other);
  }

  /**
   * RecordBuilder for SimpleEdge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimpleEdge>
    implements org.apache.avro.data.RecordBuilder<SimpleEdge> {

    /** A unique id of the From entity on the edge */
    private com.bbn.tc.schema.avro.UUID fromUuid;
    /** The id of the To entity on the edge */
    private com.bbn.tc.schema.avro.UUID toUuid;
    /** The type of the edge, see EdgeType */
    private com.bbn.tc.schema.avro.EdgeType type;
    /** * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC. */
    private long timestamp;
    /** Arbitrary key, value pairs describing the edge */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.SimpleEdge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fromUuid)) {
        this.fromUuid = data().deepCopy(fields()[0].schema(), other.fromUuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.toUuid)) {
        this.toUuid = data().deepCopy(fields()[1].schema(), other.toUuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimpleEdge instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.SimpleEdge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fromUuid)) {
        this.fromUuid = data().deepCopy(fields()[0].schema(), other.fromUuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.toUuid)) {
        this.toUuid = data().deepCopy(fields()[1].schema(), other.toUuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'fromUuid' field.
      * A unique id of the From entity on the edge
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getFromUuid() {
      return fromUuid;
    }

    /**
      * Sets the value of the 'fromUuid' field.
      * A unique id of the From entity on the edge
      * @param value The value of 'fromUuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder setFromUuid(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[0], value);
      this.fromUuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fromUuid' field has been set.
      * A unique id of the From entity on the edge
      * @return True if the 'fromUuid' field has been set, false otherwise.
      */
    public boolean hasFromUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fromUuid' field.
      * A unique id of the From entity on the edge
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder clearFromUuid() {
      fromUuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'toUuid' field.
      * The id of the To entity on the edge
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getToUuid() {
      return toUuid;
    }

    /**
      * Sets the value of the 'toUuid' field.
      * The id of the To entity on the edge
      * @param value The value of 'toUuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder setToUuid(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[1], value);
      this.toUuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'toUuid' field has been set.
      * The id of the To entity on the edge
      * @return True if the 'toUuid' field has been set, false otherwise.
      */
    public boolean hasToUuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'toUuid' field.
      * The id of the To entity on the edge
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder clearToUuid() {
      toUuid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the edge, see EdgeType
      * @return The value.
      */
    public com.bbn.tc.schema.avro.EdgeType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the edge, see EdgeType
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder setType(com.bbn.tc.schema.avro.EdgeType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the edge, see EdgeType
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the edge, see EdgeType
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * * When the edge was created.
        * Timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the edge
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the edge
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.properties = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Arbitrary key, value pairs describing the edge
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'properties' field.
      * Arbitrary key, value pairs describing the edge
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.SimpleEdge.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public SimpleEdge build() {
      try {
        SimpleEdge record = new SimpleEdge();
        record.fromUuid = fieldSetFlags()[0] ? this.fromUuid : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[0]);
        record.toUuid = fieldSetFlags()[1] ? this.toUuid : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.bbn.tc.schema.avro.EdgeType) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.properties = fieldSetFlags()[4] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
