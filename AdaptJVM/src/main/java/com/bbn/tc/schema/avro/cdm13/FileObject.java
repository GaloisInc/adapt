/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Represents a file on the file system. Instantiates an AbstractObject. */
@org.apache.avro.specific.AvroGenerated
public class FileObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1393692462428291582L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileObject\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Represents a file on the file system. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which could include sockets, files,\\n     *  memory, and any data in general that can be an input and/or output to an event.\\n     *  This record is intended to be abstract i.e., one should not instantiate an Object\\n     *  but rather instantiate one of its sub types File, NetFlow, of Memory\",\"fields\":[{\"name\":\"source\",\"type\":{\"type\":\"enum\",\"name\":\"InstrumentationSource\",\"doc\":\"* SOURCE_LINUX_AUDIT_TRACE,          from Linux /dev/audit\\n * SOURCE_LINUX_PROC_TRACE,           from Linux's /proc\\n     * * SOURCE_LINUX_BEEP_TRACE,           from BEEP instrumentation\\n     * * SOURCE_FREEBSD_OPENBSM_TRACE,      from FreeBSD openBSM\\n     * * SOURCE_ANDROID_JAVA_CLEARSCOPE,    from android java instrumentation\\n     * * SOURCE_ANDROID_NATIVE_CLEARSCOPE,  from android's native instrumentation\\n * * SOURCE_FREEBSD_DTRACE_CADETS, SOURCE_FREEBSD_TESLA_CADETS  for CADETS * freebsd instrumentation\\n     * SOURCE_FREEBSD_LOOM_CADETS, * SOURCE_FREEBSD_MACIF_CADETS    for CADETS freebsd instrumentation\\n     * * SOURCE_LINUX_THEIA                 from the GATech THEIA instrumentation * source\\n     * SOURCE_WINDOWS_FIVEDIRECTIONS      for the fivedirections * windows events\",\"symbols\":[\"SOURCE_LINUX_AUDIT_TRACE\",\"SOURCE_LINUX_PROC_TRACE\",\"SOURCE_LINUX_BEEP_TRACE\",\"SOURCE_FREEBSD_OPENBSM_TRACE\",\"SOURCE_ANDROID_JAVA_CLEARSCOPE\",\"SOURCE_ANDROID_NATIVE_CLEARSCOPE\",\"SOURCE_FREEBSD_DTRACE_CADETS\",\"SOURCE_FREEBSD_TESLA_CADETS\",\"SOURCE_FREEBSD_LOOM_CADETS\",\"SOURCE_FREEBSD_MACIF_CADETS\",\"SOURCE_WINDOWS_DIFT_FAROS\",\"SOURCE_LINUX_THEIA\",\"SOURCE_WINDOWS_FIVEDIRECTIONS\"]},\"doc\":\"The source that emitted the object, see InstrumentationSource\"},{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"lastTimestampMicros\",\"type\":[\"null\",\"long\"],\"doc\":\"* The timestamp when the object was last modified (Optional).\\n        * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Arbitrary key, value pairs describing the entity\",\"default\":null}]},\"doc\":\"The base object attributes\"},{\"name\":\"url\",\"type\":\"string\",\"doc\":\"The location of the file absolute path or remote url\"},{\"name\":\"isPipe\",\"type\":\"boolean\",\"doc\":\"Whether the file is a Unix pipe\",\"default\":false},{\"name\":\"version\",\"type\":\"int\",\"doc\":\"The file version incremented every time the file changes\",\"default\":1},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"The file size in bytes (Optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Universally unique identifier for the object */
  @Deprecated public com.bbn.tc.schema.avro.UUID uuid;
  /** The base object attributes */
  @Deprecated public com.bbn.tc.schema.avro.AbstractObject baseObject;
  /** The location of the file absolute path or remote url */
  @Deprecated public java.lang.CharSequence url;
  /** Whether the file is a Unix pipe */
  @Deprecated public boolean isPipe;
  /** The file version incremented every time the file changes */
  @Deprecated public int version;
  /** The file size in bytes (Optional) */
  @Deprecated public java.lang.Long size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileObject() {}

  /**
   * All-args constructor.
   * @param uuid Universally unique identifier for the object
   * @param baseObject The base object attributes
   * @param url The location of the file absolute path or remote url
   * @param isPipe Whether the file is a Unix pipe
   * @param version The file version incremented every time the file changes
   * @param size The file size in bytes (Optional)
   */
  public FileObject(com.bbn.tc.schema.avro.UUID uuid, com.bbn.tc.schema.avro.AbstractObject baseObject, java.lang.CharSequence url, java.lang.Boolean isPipe, java.lang.Integer version, java.lang.Long size) {
    this.uuid = uuid;
    this.baseObject = baseObject;
    this.url = url;
    this.isPipe = isPipe;
    this.version = version;
    this.size = size;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return baseObject;
    case 2: return url;
    case 3: return isPipe;
    case 4: return version;
    case 5: return size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 1: baseObject = (com.bbn.tc.schema.avro.AbstractObject)value$; break;
    case 2: url = (java.lang.CharSequence)value$; break;
    case 3: isPipe = (java.lang.Boolean)value$; break;
    case 4: version = (java.lang.Integer)value$; break;
    case 5: size = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Universally unique identifier for the object
   */
  public com.bbn.tc.schema.avro.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Universally unique identifier for the object
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'baseObject' field.
   * @return The base object attributes
   */
  public com.bbn.tc.schema.avro.AbstractObject getBaseObject() {
    return baseObject;
  }

  /**
   * Sets the value of the 'baseObject' field.
   * The base object attributes
   * @param value the value to set.
   */
  public void setBaseObject(com.bbn.tc.schema.avro.AbstractObject value) {
    this.baseObject = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The location of the file absolute path or remote url
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * The location of the file absolute path or remote url
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'isPipe' field.
   * @return Whether the file is a Unix pipe
   */
  public java.lang.Boolean getIsPipe() {
    return isPipe;
  }

  /**
   * Sets the value of the 'isPipe' field.
   * Whether the file is a Unix pipe
   * @param value the value to set.
   */
  public void setIsPipe(java.lang.Boolean value) {
    this.isPipe = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The file version incremented every time the file changes
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * The file version incremented every time the file changes
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The file size in bytes (Optional)
   */
  public java.lang.Long getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * The file size in bytes (Optional)
   * @param value the value to set.
   */
  public void setSize(java.lang.Long value) {
    this.size = value;
  }

  /**
   * Creates a new FileObject RecordBuilder.
   * @return A new FileObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.FileObject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.FileObject.Builder();
  }

  /**
   * Creates a new FileObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.FileObject.Builder newBuilder(com.bbn.tc.schema.avro.FileObject.Builder other) {
    return new com.bbn.tc.schema.avro.FileObject.Builder(other);
  }

  /**
   * Creates a new FileObject RecordBuilder by copying an existing FileObject instance.
   * @param other The existing instance to copy.
   * @return A new FileObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.FileObject.Builder newBuilder(com.bbn.tc.schema.avro.FileObject other) {
    return new com.bbn.tc.schema.avro.FileObject.Builder(other);
  }

  /**
   * RecordBuilder for FileObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileObject>
    implements org.apache.avro.data.RecordBuilder<FileObject> {

    /** Universally unique identifier for the object */
    private com.bbn.tc.schema.avro.UUID uuid;
    /** The base object attributes */
    private com.bbn.tc.schema.avro.AbstractObject baseObject;
    private com.bbn.tc.schema.avro.AbstractObject.Builder baseObjectBuilder;
    /** The location of the file absolute path or remote url */
    private java.lang.CharSequence url;
    /** Whether the file is a Unix pipe */
    private boolean isPipe;
    /** The file version incremented every time the file changes */
    private int version;
    /** The file size in bytes (Optional) */
    private java.lang.Long size;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.FileObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBaseObjectBuilder()) {
        this.baseObjectBuilder = com.bbn.tc.schema.avro.AbstractObject.newBuilder(other.getBaseObjectBuilder());
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isPipe)) {
        this.isPipe = data().deepCopy(fields()[3].schema(), other.isPipe);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.size)) {
        this.size = data().deepCopy(fields()[5].schema(), other.size);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FileObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.FileObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      this.baseObjectBuilder = null;
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isPipe)) {
        this.isPipe = data().deepCopy(fields()[3].schema(), other.isPipe);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.size)) {
        this.size = data().deepCopy(fields()[5].schema(), other.size);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setUuid(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Universally unique identifier for the object
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseObject' field.
      * The base object attributes
      * @return The value.
      */
    public com.bbn.tc.schema.avro.AbstractObject getBaseObject() {
      return baseObject;
    }

    /**
      * Sets the value of the 'baseObject' field.
      * The base object attributes
      * @param value The value of 'baseObject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setBaseObject(com.bbn.tc.schema.avro.AbstractObject value) {
      validate(fields()[1], value);
      this.baseObjectBuilder = null;
      this.baseObject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseObject' field has been set.
      * The base object attributes
      * @return True if the 'baseObject' field has been set, false otherwise.
      */
    public boolean hasBaseObject() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'baseObject' field and creates one if it doesn't exist yet.
     * The base object attributes
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.AbstractObject.Builder getBaseObjectBuilder() {
      if (baseObjectBuilder == null) {
        if (hasBaseObject()) {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.AbstractObject.newBuilder(baseObject));
        } else {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.AbstractObject.newBuilder());
        }
      }
      return baseObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseObject' field
     * The base object attributes
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.FileObject.Builder setBaseObjectBuilder(com.bbn.tc.schema.avro.AbstractObject.Builder value) {
      clearBaseObject();
      baseObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseObject' field has an active Builder instance
     * The base object attributes
     * @return True if the 'baseObject' field has an active Builder instance
     */
    public boolean hasBaseObjectBuilder() {
      return baseObjectBuilder != null;
    }

    /**
      * Clears the value of the 'baseObject' field.
      * The base object attributes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearBaseObject() {
      baseObject = null;
      baseObjectBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * The location of the file absolute path or remote url
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * The location of the file absolute path or remote url
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * The location of the file absolute path or remote url
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'url' field.
      * The location of the file absolute path or remote url
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearUrl() {
      url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPipe' field.
      * Whether the file is a Unix pipe
      * @return The value.
      */
    public java.lang.Boolean getIsPipe() {
      return isPipe;
    }

    /**
      * Sets the value of the 'isPipe' field.
      * Whether the file is a Unix pipe
      * @param value The value of 'isPipe'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setIsPipe(boolean value) {
      validate(fields()[3], value);
      this.isPipe = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isPipe' field has been set.
      * Whether the file is a Unix pipe
      * @return True if the 'isPipe' field has been set, false otherwise.
      */
    public boolean hasIsPipe() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isPipe' field.
      * Whether the file is a Unix pipe
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearIsPipe() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * The file version incremented every time the file changes
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * The file version incremented every time the file changes
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setVersion(int value) {
      validate(fields()[4], value);
      this.version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * The file version incremented every time the file changes
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'version' field.
      * The file version incremented every time the file changes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearVersion() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * The file size in bytes (Optional)
      * @return The value.
      */
    public java.lang.Long getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * The file size in bytes (Optional)
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder setSize(java.lang.Long value) {
      validate(fields()[5], value);
      this.size = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * The file size in bytes (Optional)
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'size' field.
      * The file size in bytes (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.FileObject.Builder clearSize() {
      size = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public FileObject build() {
      try {
        FileObject record = new FileObject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[0]);
        if (baseObjectBuilder != null) {
          record.baseObject = this.baseObjectBuilder.build();
        } else {
          record.baseObject = fieldSetFlags()[1] ? this.baseObject : (com.bbn.tc.schema.avro.AbstractObject) defaultValue(fields()[1]);
        }
        record.url = fieldSetFlags()[2] ? this.url : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.isPipe = fieldSetFlags()[3] ? this.isPipe : (java.lang.Boolean) defaultValue(fields()[3]);
        record.version = fieldSetFlags()[4] ? this.version : (java.lang.Integer) defaultValue(fields()[4]);
        record.size = fieldSetFlags()[5] ? this.size : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
