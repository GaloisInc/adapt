/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm13;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * A provenance tag defines source dependence on specific data sources (inputs).
     * A tag identifier is typically bound to a source and used by the tracking system to
     * capture dependence on this source input.
     * A provenance tag is represented as a tree. Each node in the tree has a value and
     * a set of children nodes. */
@org.apache.avro.specific.AvroGenerated
public class ProvenanceTagNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5727889058320071132L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProvenanceTagNode\",\"namespace\":\"com.bbn.tc.schema.avro.cdm13\",\"doc\":\"* A provenance tag defines source dependence on specific data sources (inputs).\\n     * A tag identifier is typically bound to a source and used by the tracking system to\\n     * capture dependence on this source input.\\n     * A provenance tag is represented as a tree. Each node in the tree has a value and\\n     * a set of children nodes.\",\"fields\":[{\"name\":\"value\",\"type\":[\"int\",{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},{\"type\":\"enum\",\"name\":\"TagOpCode\",\"doc\":\"* The tag opcode describes the provenance relation i.e., how multiple sources are combined to\\n     * produce the output. We identify the following provenance relations\\n     *\\n     *   TAG_OP_SEQUENCE       the output is derived from the specified inputs in order, sequentially\\n     *TAG_OP_UNION,         the output is the union of its inputs\\n     * TAG_OP_ENCODE         the output is some encoding of the input\\n     * TAG_OP_STRONG         this is more qualitative (coarse) saying there is strong dependence\\n     *   TAG_OP_MEDIUM         this is more qualitative (coarse) saying there is medium dependence\\n     *   TAG_OP_WEAK           this is more qualitative (coarse) saying there is weak   dependence\",\"symbols\":[\"TAG_OP_SEQUENCE\",\"TAG_OP_UNION\",\"TAG_OP_ENCODE\",\"TAG_OP_STRONG\",\"TAG_OP_MEDIUM\",\"TAG_OP_WEAK\"]},{\"type\":\"enum\",\"name\":\"IntegrityTag\",\"doc\":\"* The integrity tag may be used to specify the initial integrity of an entity,\\n     * or to endorse its content after performing appropriate checking/sanitization.\",\"symbols\":[\"INTEGRITY_UNTRUSTED\",\"INTEGRITY_BENIGN\",\"INTEGRITY_INVULNERABLE\"]},{\"type\":\"enum\",\"name\":\"ConfidentialityTag\",\"doc\":\"* The confidentiality tag may be used to specify the initial confidentiality of an entity,\\n     * or to declassify its content after performing appropriate checking/sanitization.\",\"symbols\":[\"CONFIDENTIALITY_SECRET\",\"CONFIDENTIALITY_SENSITIVE\",\"CONFIDENTIALITY_PRIVATE\",\"CONFIDENTIALITY_PUBLIC\"]}],\"doc\":\"*  the value of the node: can have the following types\\n *   int                 references another node by tagId\\n         *   UUID *   object uuid (source or sink for example)\\n         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode\\n         * *   IntegrityTag        an integrity tag\\n         *   ConfidentialityTag  a *   confidentiality tag\"},{\"name\":\"children\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ProvenanceTagNode\"}],\"doc\":\"the child nodes\",\"default\":null},{\"name\":\"tagId\",\"type\":[\"null\",\"int\"],\"doc\":\"* the id to be assigned to this tag node\\n         * typically set once when the node is first created, and used in value afterwards\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Arbitrary key, value pairs associated with a tag node\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag */
  @Deprecated public java.lang.Object value;
  /** the child nodes */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> children;
  /** * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards */
  @Deprecated public java.lang.Integer tagId;
  /** Arbitrary key, value pairs associated with a tag node */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProvenanceTagNode() {}

  /**
   * All-args constructor.
   * @param value *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
   * @param children the child nodes
   * @param tagId * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
   * @param properties Arbitrary key, value pairs associated with a tag node
   */
  public ProvenanceTagNode(java.lang.Object value, java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> children, java.lang.Integer tagId, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.value = value;
    this.children = children;
    this.tagId = tagId;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return children;
    case 2: return tagId;
    case 3: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.Object)value$; break;
    case 1: children = (java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode>)value$; break;
    case 2: tagId = (java.lang.Integer)value$; break;
    case 3: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
   */
  public java.lang.Object getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
   * @param value the value to set.
   */
  public void setValue(java.lang.Object value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'children' field.
   * @return the child nodes
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> getChildren() {
    return children;
  }

  /**
   * Sets the value of the 'children' field.
   * the child nodes
   * @param value the value to set.
   */
  public void setChildren(java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> value) {
    this.children = value;
  }

  /**
   * Gets the value of the 'tagId' field.
   * @return * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
   */
  public java.lang.Integer getTagId() {
    return tagId;
  }

  /**
   * Sets the value of the 'tagId' field.
   * * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
   * @param value the value to set.
   */
  public void setTagId(java.lang.Integer value) {
    this.tagId = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Arbitrary key, value pairs associated with a tag node
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Arbitrary key, value pairs associated with a tag node
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new ProvenanceTagNode RecordBuilder.
   * @return A new ProvenanceTagNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder();
  }

  /**
   * Creates a new ProvenanceTagNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProvenanceTagNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder newBuilder(com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder other) {
    return new com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder(other);
  }

  /**
   * Creates a new ProvenanceTagNode RecordBuilder by copying an existing ProvenanceTagNode instance.
   * @param other The existing instance to copy.
   * @return A new ProvenanceTagNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder newBuilder(com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode other) {
    return new com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder(other);
  }

  /**
   * RecordBuilder for ProvenanceTagNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProvenanceTagNode>
    implements org.apache.avro.data.RecordBuilder<ProvenanceTagNode> {

    /** *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag */
    private java.lang.Object value;
    /** the child nodes */
    private java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> children;
    /** * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards */
    private java.lang.Integer tagId;
    /** Arbitrary key, value pairs associated with a tag node */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.children)) {
        this.children = data().deepCopy(fields()[1].schema(), other.children);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tagId)) {
        this.tagId = data().deepCopy(fields()[2].schema(), other.tagId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ProvenanceTagNode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.children)) {
        this.children = data().deepCopy(fields()[1].schema(), other.children);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tagId)) {
        this.tagId = data().deepCopy(fields()[2].schema(), other.tagId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
      * @return The value.
      */
    public java.lang.Object getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder setValue(java.lang.Object value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * *  the value of the node: can have the following types
 *   int                 references another node by tagId
         *   UUID *   object uuid (source or sink for example)
         *   TaOpCode *   the opcode applied to the children nodes, see TaOpCode
         * *   IntegrityTag        an integrity tag
         *   ConfidentialityTag  a *   confidentiality tag
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'children' field.
      * the child nodes
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> getChildren() {
      return children;
    }

    /**
      * Sets the value of the 'children' field.
      * the child nodes
      * @param value The value of 'children'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder setChildren(java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode> value) {
      validate(fields()[1], value);
      this.children = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'children' field has been set.
      * the child nodes
      * @return True if the 'children' field has been set, false otherwise.
      */
    public boolean hasChildren() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'children' field.
      * the child nodes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder clearChildren() {
      children = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tagId' field.
      * * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
      * @return The value.
      */
    public java.lang.Integer getTagId() {
      return tagId;
    }

    /**
      * Sets the value of the 'tagId' field.
      * * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
      * @param value The value of 'tagId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder setTagId(java.lang.Integer value) {
      validate(fields()[2], value);
      this.tagId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tagId' field has been set.
      * * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
      * @return True if the 'tagId' field has been set, false otherwise.
      */
    public boolean hasTagId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tagId' field.
      * * the id to be assigned to this tag node
         * typically set once when the node is first created, and used in value afterwards
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder clearTagId() {
      tagId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Arbitrary key, value pairs associated with a tag node
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Arbitrary key, value pairs associated with a tag node
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.properties = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Arbitrary key, value pairs associated with a tag node
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'properties' field.
      * Arbitrary key, value pairs associated with a tag node
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ProvenanceTagNode build() {
      try {
        ProvenanceTagNode record = new ProvenanceTagNode();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.Object) defaultValue(fields()[0]);
        record.children = fieldSetFlags()[1] ? this.children : (java.util.List<com.bbn.tc.schema.avro.cdm13.ProvenanceTagNode>) defaultValue(fields()[1]);
        record.tagId = fieldSetFlags()[2] ? this.tagId : (java.lang.Integer) defaultValue(fields()[2]);
        record.properties = fieldSetFlags()[3] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
