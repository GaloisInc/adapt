/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Values represent transient data, mainly parameters to events. Values are created and used once within an
     * event's execution and are relevant mainly during fine-grained tracking (such as with tag/taint propagation).
     * Values have tags describing their provenance. Sometimes the actual value's value is reported in addition to
     * the value's metadata
     *
     * The size of the value is the number of elements of type valueDataType. This should be 0 for primitive or
     * complex types or the size of the array for arrays i.e., if size>0, then this value is an array.
 * A complex value (such as an object) can contain other values (primitives of * other complex values) within it, as
     * components.
     *
     * isNull * indicates whether a complex value is null. runtimeDataType indicates the * runtime datatype. E.g., <br>
     *  e.g., an integer will have size=0 and * valueDataType=INT, and valueBytes.length=4 bytes <br>
     *  e.g., an int[4] * will have  size=4 and valueDataType=INT, and valueBytes.length=16 bytes (4*4) * <br>
     *  e.g., a string s="abc" has size=3 and valueDataType=CHAR, and * valueBytes.length=6 bytes (treated as char[]) <br>
     *  e.g., an MyClass * obj has size=0, valueDataType=COMPLEX, runtimeDataType="MyClass", * valueBytes=<pointer> <br> */
@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2950727604245715395L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Values represent transient data, mainly parameters to events. Values are created and used once within an\\n     * event's execution and are relevant mainly during fine-grained tracking (such as with tag/taint propagation).\\n     * Values have tags describing their provenance. Sometimes the actual value's value is reported in addition to\\n     * the value's metadata\\n     *\\n     * The size of the value is the number of elements of type valueDataType. This should be 0 for primitive or\\n     * complex types or the size of the array for arrays i.e., if size>0, then this value is an array.\\n * A complex value (such as an object) can contain other values (primitives of * other complex values) within it, as\\n     * components.\\n     *\\n     * isNull * indicates whether a complex value is null. runtimeDataType indicates the * runtime datatype. E.g., <br>\\n     *  e.g., an integer will have size=0 and * valueDataType=INT, and valueBytes.length=4 bytes <br>\\n     *  e.g., an int[4] * will have  size=4 and valueDataType=INT, and valueBytes.length=16 bytes (4*4) * <br>\\n     *  e.g., a string s=\\\"abc\\\" has size=3 and valueDataType=CHAR, and * valueBytes.length=6 bytes (treated as char[]) <br>\\n     *  e.g., an MyClass * obj has size=0, valueDataType=COMPLEX, runtimeDataType=\\\"MyClass\\\", * valueBytes=<pointer> <br>\",\"fields\":[{\"name\":\"size\",\"type\":\"int\",\"doc\":\"The size of the value: the number of elements of type valueDataType; 0 for primitives\",\"default\":0},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ValueType\",\"doc\":\"* A value type is either in, out, or in/out\\n     * This is for event parameters to distinguish inputs vs return values\\n     *\\n *   VALUE_TYPE_IN       An input value to the event\\n     *   VALUE_TYPE_OUT *   An output value from the event (return value)\\n     *   VALUE_TYPE_INOUT *   Adding this for completeness\",\"symbols\":[\"VALUE_TYPE_IN\",\"VALUE_TYPE_OUT\",\"VALUE_TYPE_INOUT\"]},\"doc\":\"The type of the value whether input or return\"},{\"name\":\"valueDataType\",\"type\":{\"type\":\"enum\",\"name\":\"ValueDataType\",\"doc\":\"* A value data type is one of the primitive data types. A string is treated as a char array\",\"symbols\":[\"VALUE_DATA_TYPE_BYTE\",\"VALUE_DATA_TYPE_BOOL\",\"VALUE_DATA_TYPE_CHAR\",\"VALUE_DATA_TYPE_SHORT\",\"VALUE_DATA_TYPE_INT\",\"VALUE_DATA_TYPE_FLOAT\",\"VALUE_DATA_TYPE_LONG\",\"VALUE_DATA_TYPE_DOUBLE\",\"VALUE_DATA_TYPE_COMPLEX\"]},\"doc\":\"The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)\\n         *  Strings are treated as char[] so type=CHAR\\n         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])\\n         *  Complex composite objects comprising of primitive values use the COMPLEX type\"},{\"name\":\"isNull\",\"type\":\"boolean\",\"doc\":\"Whether this value is null, needed to indicate null objects (default: false)\",\"default\":false},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"the name of the Value, string. (Optional)\",\"default\":null},{\"name\":\"runtimeDataType\",\"type\":[\"null\",\"string\"],\"doc\":\"The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have\\n         *  a runtime data type of say \\\"MyClass\\\"\",\"default\":null},{\"name\":\"valueBytes\",\"type\":[\"null\",\"bytes\"],\"doc\":\"The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)\",\"default\":null},{\"name\":\"tag\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"* The value's tag expression describing its provenance (Optional)\\n         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:\\n         * {<numElements:int>, <tagId:int>}*\\n         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of\\n * an int[16] value, this would be represented using the following tag array\\n * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2\\n         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer\\n         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)\\n         * before it can be * assigned to a value\",\"default\":null},{\"name\":\"components\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Value\"}],\"doc\":\"A complex value might comprise other component values if needed (Optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The size of the value: the number of elements of type valueDataType; 0 for primitives */
  @Deprecated public int size;
  /** The type of the value whether input or return */
  @Deprecated public com.bbn.tc.schema.avro.ValueType type;
  /** The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type */
  @Deprecated public com.bbn.tc.schema.avro.ValueDataType valueDataType;
  /** Whether this value is null, needed to indicate null objects (default: false) */
  @Deprecated public boolean isNull;
  /** the name of the Value, string. (Optional) */
  @Deprecated public java.lang.CharSequence name;
  /** The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass" */
  @Deprecated public java.lang.CharSequence runtimeDataType;
  /** The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional) */
  @Deprecated public java.nio.ByteBuffer valueBytes;
  /** * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value */
  @Deprecated public java.util.List<java.lang.Integer> tag;
  /** A complex value might comprise other component values if needed (Optional) */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.Value> components;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param size The size of the value: the number of elements of type valueDataType; 0 for primitives
   * @param type The type of the value whether input or return
   * @param valueDataType The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   * @param isNull Whether this value is null, needed to indicate null objects (default: false)
   * @param name the name of the Value, string. (Optional)
   * @param runtimeDataType The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   * @param valueBytes The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
   * @param tag * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
   * @param components A complex value might comprise other component values if needed (Optional)
   */
  public Value(java.lang.Integer size, com.bbn.tc.schema.avro.ValueType type, com.bbn.tc.schema.avro.ValueDataType valueDataType, java.lang.Boolean isNull, java.lang.CharSequence name, java.lang.CharSequence runtimeDataType, java.nio.ByteBuffer valueBytes, java.util.List<java.lang.Integer> tag, java.util.List<com.bbn.tc.schema.avro.Value> components) {
    this.size = size;
    this.type = type;
    this.valueDataType = valueDataType;
    this.isNull = isNull;
    this.name = name;
    this.runtimeDataType = runtimeDataType;
    this.valueBytes = valueBytes;
    this.tag = tag;
    this.components = components;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return size;
    case 1: return type;
    case 2: return valueDataType;
    case 3: return isNull;
    case 4: return name;
    case 5: return runtimeDataType;
    case 6: return valueBytes;
    case 7: return tag;
    case 8: return components;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: size = (java.lang.Integer)value$; break;
    case 1: type = (com.bbn.tc.schema.avro.ValueType)value$; break;
    case 2: valueDataType = (com.bbn.tc.schema.avro.ValueDataType)value$; break;
    case 3: isNull = (java.lang.Boolean)value$; break;
    case 4: name = (java.lang.CharSequence)value$; break;
    case 5: runtimeDataType = (java.lang.CharSequence)value$; break;
    case 6: valueBytes = (java.nio.ByteBuffer)value$; break;
    case 7: tag = (java.util.List<java.lang.Integer>)value$; break;
    case 8: components = (java.util.List<com.bbn.tc.schema.avro.Value>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'size' field.
   * @return The size of the value: the number of elements of type valueDataType; 0 for primitives
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * The size of the value: the number of elements of type valueDataType; 0 for primitives
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of the value whether input or return
   */
  public com.bbn.tc.schema.avro.ValueType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of the value whether input or return
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.ValueType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'valueDataType' field.
   * @return The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   */
  public com.bbn.tc.schema.avro.ValueDataType getValueDataType() {
    return valueDataType;
  }

  /**
   * Sets the value of the 'valueDataType' field.
   * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   * @param value the value to set.
   */
  public void setValueDataType(com.bbn.tc.schema.avro.ValueDataType value) {
    this.valueDataType = value;
  }

  /**
   * Gets the value of the 'isNull' field.
   * @return Whether this value is null, needed to indicate null objects (default: false)
   */
  public java.lang.Boolean getIsNull() {
    return isNull;
  }

  /**
   * Sets the value of the 'isNull' field.
   * Whether this value is null, needed to indicate null objects (default: false)
   * @param value the value to set.
   */
  public void setIsNull(java.lang.Boolean value) {
    this.isNull = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return the name of the Value, string. (Optional)
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * the name of the Value, string. (Optional)
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'runtimeDataType' field.
   * @return The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   */
  public java.lang.CharSequence getRuntimeDataType() {
    return runtimeDataType;
  }

  /**
   * Sets the value of the 'runtimeDataType' field.
   * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   * @param value the value to set.
   */
  public void setRuntimeDataType(java.lang.CharSequence value) {
    this.runtimeDataType = value;
  }

  /**
   * Gets the value of the 'valueBytes' field.
   * @return The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
   */
  public java.nio.ByteBuffer getValueBytes() {
    return valueBytes;
  }

  /**
   * Sets the value of the 'valueBytes' field.
   * The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
   * @param value the value to set.
   */
  public void setValueBytes(java.nio.ByteBuffer value) {
    this.valueBytes = value;
  }

  /**
   * Gets the value of the 'tag' field.
   * @return * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
   */
  public java.util.List<java.lang.Integer> getTag() {
    return tag;
  }

  /**
   * Sets the value of the 'tag' field.
   * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
   * @param value the value to set.
   */
  public void setTag(java.util.List<java.lang.Integer> value) {
    this.tag = value;
  }

  /**
   * Gets the value of the 'components' field.
   * @return A complex value might comprise other component values if needed (Optional)
   */
  public java.util.List<com.bbn.tc.schema.avro.Value> getComponents() {
    return components;
  }

  /**
   * Sets the value of the 'components' field.
   * A complex value might comprise other component values if needed (Optional)
   * @param value the value to set.
   */
  public void setComponents(java.util.List<com.bbn.tc.schema.avro.Value> value) {
    this.components = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Value.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Value.Builder newBuilder(com.bbn.tc.schema.avro.Value.Builder other) {
    return new com.bbn.tc.schema.avro.Value.Builder(other);
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Value.Builder newBuilder(com.bbn.tc.schema.avro.Value other) {
    return new com.bbn.tc.schema.avro.Value.Builder(other);
  }

  /**
   * RecordBuilder for Value instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    /** The size of the value: the number of elements of type valueDataType; 0 for primitives */
    private int size;
    /** The type of the value whether input or return */
    private com.bbn.tc.schema.avro.ValueType type;
    /** The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type */
    private com.bbn.tc.schema.avro.ValueDataType valueDataType;
    /** Whether this value is null, needed to indicate null objects (default: false) */
    private boolean isNull;
    /** the name of the Value, string. (Optional) */
    private java.lang.CharSequence name;
    /** The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass" */
    private java.lang.CharSequence runtimeDataType;
    /** The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional) */
    private java.nio.ByteBuffer valueBytes;
    /** * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value */
    private java.util.List<java.lang.Integer> tag;
    /** A complex value might comprise other component values if needed (Optional) */
    private java.util.List<com.bbn.tc.schema.avro.Value> components;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueDataType)) {
        this.valueDataType = data().deepCopy(fields()[2].schema(), other.valueDataType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isNull)) {
        this.isNull = data().deepCopy(fields()[3].schema(), other.isNull);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtimeDataType)) {
        this.runtimeDataType = data().deepCopy(fields()[5].schema(), other.runtimeDataType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valueBytes)) {
        this.valueBytes = data().deepCopy(fields()[6].schema(), other.valueBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tag)) {
        this.tag = data().deepCopy(fields()[7].schema(), other.tag);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.components)) {
        this.components = data().deepCopy(fields()[8].schema(), other.components);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Value other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueDataType)) {
        this.valueDataType = data().deepCopy(fields()[2].schema(), other.valueDataType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isNull)) {
        this.isNull = data().deepCopy(fields()[3].schema(), other.isNull);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtimeDataType)) {
        this.runtimeDataType = data().deepCopy(fields()[5].schema(), other.runtimeDataType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valueBytes)) {
        this.valueBytes = data().deepCopy(fields()[6].schema(), other.valueBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tag)) {
        this.tag = data().deepCopy(fields()[7].schema(), other.tag);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.components)) {
        this.components = data().deepCopy(fields()[8].schema(), other.components);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; 0 for primitives
      * @return The value.
      */
    public java.lang.Integer getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; 0 for primitives
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setSize(int value) {
      validate(fields()[0], value);
      this.size = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * The size of the value: the number of elements of type valueDataType; 0 for primitives
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; 0 for primitives
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearSize() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the value whether input or return
      * @return The value.
      */
    public com.bbn.tc.schema.avro.ValueType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the value whether input or return
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setType(com.bbn.tc.schema.avro.ValueType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the value whether input or return
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the value whether input or return
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return The value.
      */
    public com.bbn.tc.schema.avro.ValueDataType getValueDataType() {
      return valueDataType;
    }

    /**
      * Sets the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @param value The value of 'valueDataType'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setValueDataType(com.bbn.tc.schema.avro.ValueDataType value) {
      validate(fields()[2], value);
      this.valueDataType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'valueDataType' field has been set.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return True if the 'valueDataType' field has been set, false otherwise.
      */
    public boolean hasValueDataType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearValueDataType() {
      valueDataType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return The value.
      */
    public java.lang.Boolean getIsNull() {
      return isNull;
    }

    /**
      * Sets the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @param value The value of 'isNull'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setIsNull(boolean value) {
      validate(fields()[3], value);
      this.isNull = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isNull' field has been set.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return True if the 'isNull' field has been set, false otherwise.
      */
    public boolean hasIsNull() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearIsNull() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * the name of the Value, string. (Optional)
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return The value.
      */
    public java.lang.CharSequence getRuntimeDataType() {
      return runtimeDataType;
    }

    /**
      * Sets the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @param value The value of 'runtimeDataType'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setRuntimeDataType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.runtimeDataType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'runtimeDataType' field has been set.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return True if the 'runtimeDataType' field has been set, false otherwise.
      */
    public boolean hasRuntimeDataType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearRuntimeDataType() {
      runtimeDataType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueBytes' field.
      * The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
      * @return The value.
      */
    public java.nio.ByteBuffer getValueBytes() {
      return valueBytes;
    }

    /**
      * Sets the value of the 'valueBytes' field.
      * The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
      * @param value The value of 'valueBytes'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setValueBytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.valueBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'valueBytes' field has been set.
      * The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
      * @return True if the 'valueBytes' field has been set, false otherwise.
      */
    public boolean hasValueBytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'valueBytes' field.
      * The actual bytes of the value in Big Endian format, e.g., an int is converted to a 4 byte buffer (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearValueBytes() {
      valueBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTag() {
      return tag;
    }

    /**
      * Sets the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
      * @param value The value of 'tag'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setTag(java.util.List<java.lang.Integer> value) {
      validate(fields()[7], value);
      this.tag = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tag' field has been set.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
      * @return True if the 'tag' field has been set, false otherwise.
      */
    public boolean hasTag() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. The format of the array is:
         * {<numElements:int>, <tagId:int>}*
         * For example, to assign a tag 0 (unknown) to elements 0-3, 1 to elements 4-7 and 2 to elements 8-15 of
 * an int[16] value, this would be represented using the following tag array
 * *  {4, 0, 4, 1, 8, 2} meaning the first 4 elements have tag 0, next 4 have tag * 1, next 8 have tag 2
         * Note that 4 elements of the array correspond * to 16 bytes in the valueBytes buffer
         * Note that tagId had to be * defined/emitted earlier (see ProvenanceTagNode)
         * before it can be * assigned to a value
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearTag() {
      tag = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.Value> getComponents() {
      return components;
    }

    /**
      * Sets the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @param value The value of 'components'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder setComponents(java.util.List<com.bbn.tc.schema.avro.Value> value) {
      validate(fields()[8], value);
      this.components = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'components' field has been set.
      * A complex value might comprise other component values if needed (Optional)
      * @return True if the 'components' field has been set, false otherwise.
      */
    public boolean hasComponents() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Value.Builder clearComponents() {
      components = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public Value build() {
      try {
        Value record = new Value();
        record.size = fieldSetFlags()[0] ? this.size : (java.lang.Integer) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.bbn.tc.schema.avro.ValueType) defaultValue(fields()[1]);
        record.valueDataType = fieldSetFlags()[2] ? this.valueDataType : (com.bbn.tc.schema.avro.ValueDataType) defaultValue(fields()[2]);
        record.isNull = fieldSetFlags()[3] ? this.isNull : (java.lang.Boolean) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.runtimeDataType = fieldSetFlags()[5] ? this.runtimeDataType : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.valueBytes = fieldSetFlags()[6] ? this.valueBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.tag = fieldSetFlags()[7] ? this.tag : (java.util.List<java.lang.Integer>) defaultValue(fields()[7]);
        record.components = fieldSetFlags()[8] ? this.components : (java.util.List<com.bbn.tc.schema.avro.Value>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
