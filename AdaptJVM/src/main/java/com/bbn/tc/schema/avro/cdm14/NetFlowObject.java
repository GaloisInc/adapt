/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm14;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Represents a network flow object. Instantiates an AbstractObject. */
@org.apache.avro.specific.AvroGenerated
public class NetFlowObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1819995780110738472L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NetFlowObject\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Represents a network flow object. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which\\n     *  could include sockets, files, memory, and any data in general\\n     *  that can be an input and/or output to an event.  This record\\n     *  is intended to be abstract i.e., one should not instantiate an\\n     *  Object but rather instantiate one of its sub types (ie,\\n     *  encapsulating records) FileObject, UnnamedPipeObject,\\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\\n     *  SrcSinkObject.\",\"fields\":[{\"name\":\"source\",\"type\":{\"type\":\"enum\",\"name\":\"InstrumentationSource\",\"doc\":\"* InstrumentationSource identifies the source reporting provenance information.\\n     *\\n     * SOURCE_ANDROID_JAVA_CLEARSCOPE,    from android java instrumentation\\n     * SOURCE_ANDROID_NATIVE_CLEARSCOPE,  from android's native instrumentation\\n     * SOURCE_FREEBSD_OPENBSM_TRACE,      from FreeBSD openBSM\\n     * SOURCE_FREEBSD_DTRACE_CADETS,      from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_TESLA_CADETS,       from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_LOOM_CADETS,        from CADETS freebsd instrumentation\\n     * SOURCE_FREEBSD_MACIF_CADETS,       from CADETS freebsd instrumentation\\n     * SOURCE_LINUX_AUDIT_TRACE,          from Linux /dev/audit\\n     * SOURCE_LINUX_PROC_TRACE,           from Linux's /proc\\n     * SOURCE_LINUX_BEEP_TRACE,           from BEEP instrumentation\\n     * SOURCE_LINUX_THEIA                 from the GATech THEIA instrumentation source\\n     * SOURCE_WINDOWS_DIFT_FAROS,         from FAROS' DIFT module\\n     * SOURCE_WINDOWS_PSA_FAROS,          from FAROS' PSA module\\n     * SOURCE_WINDOWS_FIVEDIRECTIONS      for the fivedirections windows events\",\"symbols\":[\"SOURCE_ANDROID_JAVA_CLEARSCOPE\",\"SOURCE_ANDROID_NATIVE_CLEARSCOPE\",\"SOURCE_FREEBSD_OPENBSM_TRACE\",\"SOURCE_FREEBSD_DTRACE_CADETS\",\"SOURCE_FREEBSD_TESLA_CADETS\",\"SOURCE_FREEBSD_LOOM_CADETS\",\"SOURCE_FREEBSD_MACIF_CADETS\",\"SOURCE_LINUX_AUDIT_TRACE\",\"SOURCE_LINUX_PROC_TRACE\",\"SOURCE_LINUX_BEEP_TRACE\",\"SOURCE_LINUX_THEIA\",\"SOURCE_WINDOWS_DIFT_FAROS\",\"SOURCE_WINDOWS_PSA_FAROS\",\"SOURCE_WINDOWS_FIVEDIRECTIONS\"]},\"doc\":\"The source that emitted the object, see InstrumentationSource\"},{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"epoch\",\"type\":[\"null\",\"int\"],\"doc\":\"* Used to track when an object is deleted and a new one is\\n         * created with the same identifier. This is useful for when\\n         * UUIDs are based on something not likely to be unique, such\\n         * as file path.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null}]},\"doc\":\"The base object attributes\"},{\"name\":\"inboundAddress\",\"type\":\"string\",\"doc\":\"The inbound IP address for this flow\"},{\"name\":\"inboundPort\",\"type\":\"int\",\"doc\":\"The inbound network port for this flow\"},{\"name\":\"outboundAddress\",\"type\":\"string\",\"doc\":\"The outbound IP address for this flow\"},{\"name\":\"outboundPort\",\"type\":\"int\",\"doc\":\"The outbound network port for this flow\"},{\"name\":\"ipProtocol\",\"type\":[\"null\",\"int\"],\"doc\":\"The IP protocol number e.g., TCP=6\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Universally unique identifier for the object */
  @Deprecated public UUID uuid;
  /** The base object attributes */
  @Deprecated public AbstractObject baseObject;
  /** The inbound IP address for this flow */
  @Deprecated public java.lang.CharSequence inboundAddress;
  /** The inbound network port for this flow */
  @Deprecated public int inboundPort;
  /** The outbound IP address for this flow */
  @Deprecated public java.lang.CharSequence outboundAddress;
  /** The outbound network port for this flow */
  @Deprecated public int outboundPort;
  /** The IP protocol number e.g., TCP=6 */
  @Deprecated public java.lang.Integer ipProtocol;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NetFlowObject() {}

  /**
   * All-args constructor.
   * @param uuid Universally unique identifier for the object
   * @param baseObject The base object attributes
   * @param inboundAddress The inbound IP address for this flow
   * @param inboundPort The inbound network port for this flow
   * @param outboundAddress The outbound IP address for this flow
   * @param outboundPort The outbound network port for this flow
   * @param ipProtocol The IP protocol number e.g., TCP=6
   */
  public NetFlowObject(UUID uuid, AbstractObject baseObject, java.lang.CharSequence inboundAddress, java.lang.Integer inboundPort, java.lang.CharSequence outboundAddress, java.lang.Integer outboundPort, java.lang.Integer ipProtocol) {
    this.uuid = uuid;
    this.baseObject = baseObject;
    this.inboundAddress = inboundAddress;
    this.inboundPort = inboundPort;
    this.outboundAddress = outboundAddress;
    this.outboundPort = outboundPort;
    this.ipProtocol = ipProtocol;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return baseObject;
    case 2: return inboundAddress;
    case 3: return inboundPort;
    case 4: return outboundAddress;
    case 5: return outboundPort;
    case 6: return ipProtocol;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (UUID)value$; break;
    case 1: baseObject = (AbstractObject)value$; break;
    case 2: inboundAddress = (java.lang.CharSequence)value$; break;
    case 3: inboundPort = (java.lang.Integer)value$; break;
    case 4: outboundAddress = (java.lang.CharSequence)value$; break;
    case 5: outboundPort = (java.lang.Integer)value$; break;
    case 6: ipProtocol = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Universally unique identifier for the object
   */
  public UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Universally unique identifier for the object
   * @param value the value to set.
   */
  public void setUuid(UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'baseObject' field.
   * @return The base object attributes
   */
  public AbstractObject getBaseObject() {
    return baseObject;
  }

  /**
   * Sets the value of the 'baseObject' field.
   * The base object attributes
   * @param value the value to set.
   */
  public void setBaseObject(AbstractObject value) {
    this.baseObject = value;
  }

  /**
   * Gets the value of the 'inboundAddress' field.
   * @return The inbound IP address for this flow
   */
  public java.lang.CharSequence getInboundAddress() {
    return inboundAddress;
  }

  /**
   * Sets the value of the 'inboundAddress' field.
   * The inbound IP address for this flow
   * @param value the value to set.
   */
  public void setInboundAddress(java.lang.CharSequence value) {
    this.inboundAddress = value;
  }

  /**
   * Gets the value of the 'inboundPort' field.
   * @return The inbound network port for this flow
   */
  public java.lang.Integer getInboundPort() {
    return inboundPort;
  }

  /**
   * Sets the value of the 'inboundPort' field.
   * The inbound network port for this flow
   * @param value the value to set.
   */
  public void setInboundPort(java.lang.Integer value) {
    this.inboundPort = value;
  }

  /**
   * Gets the value of the 'outboundAddress' field.
   * @return The outbound IP address for this flow
   */
  public java.lang.CharSequence getOutboundAddress() {
    return outboundAddress;
  }

  /**
   * Sets the value of the 'outboundAddress' field.
   * The outbound IP address for this flow
   * @param value the value to set.
   */
  public void setOutboundAddress(java.lang.CharSequence value) {
    this.outboundAddress = value;
  }

  /**
   * Gets the value of the 'outboundPort' field.
   * @return The outbound network port for this flow
   */
  public java.lang.Integer getOutboundPort() {
    return outboundPort;
  }

  /**
   * Sets the value of the 'outboundPort' field.
   * The outbound network port for this flow
   * @param value the value to set.
   */
  public void setOutboundPort(java.lang.Integer value) {
    this.outboundPort = value;
  }

  /**
   * Gets the value of the 'ipProtocol' field.
   * @return The IP protocol number e.g., TCP=6
   */
  public java.lang.Integer getIpProtocol() {
    return ipProtocol;
  }

  /**
   * Sets the value of the 'ipProtocol' field.
   * The IP protocol number e.g., TCP=6
   * @param value the value to set.
   */
  public void setIpProtocol(java.lang.Integer value) {
    this.ipProtocol = value;
  }

  /**
   * Creates a new NetFlowObject RecordBuilder.
   * @return A new NetFlowObject RecordBuilder
   */
  public static NetFlowObject.Builder newBuilder() {
    return new NetFlowObject.Builder();
  }

  /**
   * Creates a new NetFlowObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NetFlowObject RecordBuilder
   */
  public static NetFlowObject.Builder newBuilder(NetFlowObject.Builder other) {
    return new NetFlowObject.Builder(other);
  }

  /**
   * Creates a new NetFlowObject RecordBuilder by copying an existing NetFlowObject instance.
   * @param other The existing instance to copy.
   * @return A new NetFlowObject RecordBuilder
   */
  public static NetFlowObject.Builder newBuilder(NetFlowObject other) {
    return new NetFlowObject.Builder(other);
  }

  /**
   * RecordBuilder for NetFlowObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NetFlowObject>
    implements org.apache.avro.data.RecordBuilder<NetFlowObject> {

    /** Universally unique identifier for the object */
    private UUID uuid;
    /** The base object attributes */
    private AbstractObject baseObject;
    private AbstractObject.Builder baseObjectBuilder;
    /** The inbound IP address for this flow */
    private java.lang.CharSequence inboundAddress;
    /** The inbound network port for this flow */
    private int inboundPort;
    /** The outbound IP address for this flow */
    private java.lang.CharSequence outboundAddress;
    /** The outbound network port for this flow */
    private int outboundPort;
    /** The IP protocol number e.g., TCP=6 */
    private java.lang.Integer ipProtocol;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(NetFlowObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBaseObjectBuilder()) {
        this.baseObjectBuilder = AbstractObject.newBuilder(other.getBaseObjectBuilder());
      }
      if (isValidValue(fields()[2], other.inboundAddress)) {
        this.inboundAddress = data().deepCopy(fields()[2].schema(), other.inboundAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inboundPort)) {
        this.inboundPort = data().deepCopy(fields()[3].schema(), other.inboundPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.outboundAddress)) {
        this.outboundAddress = data().deepCopy(fields()[4].schema(), other.outboundAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.outboundPort)) {
        this.outboundPort = data().deepCopy(fields()[5].schema(), other.outboundPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ipProtocol)) {
        this.ipProtocol = data().deepCopy(fields()[6].schema(), other.ipProtocol);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NetFlowObject instance
     * @param other The existing instance to copy.
     */
    private Builder(NetFlowObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      this.baseObjectBuilder = null;
      if (isValidValue(fields()[2], other.inboundAddress)) {
        this.inboundAddress = data().deepCopy(fields()[2].schema(), other.inboundAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inboundPort)) {
        this.inboundPort = data().deepCopy(fields()[3].schema(), other.inboundPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.outboundAddress)) {
        this.outboundAddress = data().deepCopy(fields()[4].schema(), other.outboundAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.outboundPort)) {
        this.outboundPort = data().deepCopy(fields()[5].schema(), other.outboundPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ipProtocol)) {
        this.ipProtocol = data().deepCopy(fields()[6].schema(), other.ipProtocol);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return The value.
      */
    public UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public NetFlowObject.Builder setUuid(UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Universally unique identifier for the object
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return This builder.
      */
    public NetFlowObject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseObject' field.
      * The base object attributes
      * @return The value.
      */
    public AbstractObject getBaseObject() {
      return baseObject;
    }

    /**
      * Sets the value of the 'baseObject' field.
      * The base object attributes
      * @param value The value of 'baseObject'.
      * @return This builder.
      */
    public NetFlowObject.Builder setBaseObject(AbstractObject value) {
      validate(fields()[1], value);
      this.baseObjectBuilder = null;
      this.baseObject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseObject' field has been set.
      * The base object attributes
      * @return True if the 'baseObject' field has been set, false otherwise.
      */
    public boolean hasBaseObject() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'baseObject' field and creates one if it doesn't exist yet.
     * The base object attributes
     * @return This builder.
     */
    public AbstractObject.Builder getBaseObjectBuilder() {
      if (baseObjectBuilder == null) {
        if (hasBaseObject()) {
          setBaseObjectBuilder(AbstractObject.newBuilder(baseObject));
        } else {
          setBaseObjectBuilder(AbstractObject.newBuilder());
        }
      }
      return baseObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseObject' field
     * The base object attributes
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public NetFlowObject.Builder setBaseObjectBuilder(AbstractObject.Builder value) {
      clearBaseObject();
      baseObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseObject' field has an active Builder instance
     * The base object attributes
     * @return True if the 'baseObject' field has an active Builder instance
     */
    public boolean hasBaseObjectBuilder() {
      return baseObjectBuilder != null;
    }

    /**
      * Clears the value of the 'baseObject' field.
      * The base object attributes
      * @return This builder.
      */
    public NetFlowObject.Builder clearBaseObject() {
      baseObject = null;
      baseObjectBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'inboundAddress' field.
      * The inbound IP address for this flow
      * @return The value.
      */
    public java.lang.CharSequence getInboundAddress() {
      return inboundAddress;
    }

    /**
      * Sets the value of the 'inboundAddress' field.
      * The inbound IP address for this flow
      * @param value The value of 'inboundAddress'.
      * @return This builder.
      */
    public NetFlowObject.Builder setInboundAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.inboundAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'inboundAddress' field has been set.
      * The inbound IP address for this flow
      * @return True if the 'inboundAddress' field has been set, false otherwise.
      */
    public boolean hasInboundAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'inboundAddress' field.
      * The inbound IP address for this flow
      * @return This builder.
      */
    public NetFlowObject.Builder clearInboundAddress() {
      inboundAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'inboundPort' field.
      * The inbound network port for this flow
      * @return The value.
      */
    public java.lang.Integer getInboundPort() {
      return inboundPort;
    }

    /**
      * Sets the value of the 'inboundPort' field.
      * The inbound network port for this flow
      * @param value The value of 'inboundPort'.
      * @return This builder.
      */
    public NetFlowObject.Builder setInboundPort(int value) {
      validate(fields()[3], value);
      this.inboundPort = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'inboundPort' field has been set.
      * The inbound network port for this flow
      * @return True if the 'inboundPort' field has been set, false otherwise.
      */
    public boolean hasInboundPort() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'inboundPort' field.
      * The inbound network port for this flow
      * @return This builder.
      */
    public NetFlowObject.Builder clearInboundPort() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'outboundAddress' field.
      * The outbound IP address for this flow
      * @return The value.
      */
    public java.lang.CharSequence getOutboundAddress() {
      return outboundAddress;
    }

    /**
      * Sets the value of the 'outboundAddress' field.
      * The outbound IP address for this flow
      * @param value The value of 'outboundAddress'.
      * @return This builder.
      */
    public NetFlowObject.Builder setOutboundAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.outboundAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'outboundAddress' field has been set.
      * The outbound IP address for this flow
      * @return True if the 'outboundAddress' field has been set, false otherwise.
      */
    public boolean hasOutboundAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'outboundAddress' field.
      * The outbound IP address for this flow
      * @return This builder.
      */
    public NetFlowObject.Builder clearOutboundAddress() {
      outboundAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'outboundPort' field.
      * The outbound network port for this flow
      * @return The value.
      */
    public java.lang.Integer getOutboundPort() {
      return outboundPort;
    }

    /**
      * Sets the value of the 'outboundPort' field.
      * The outbound network port for this flow
      * @param value The value of 'outboundPort'.
      * @return This builder.
      */
    public NetFlowObject.Builder setOutboundPort(int value) {
      validate(fields()[5], value);
      this.outboundPort = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'outboundPort' field has been set.
      * The outbound network port for this flow
      * @return True if the 'outboundPort' field has been set, false otherwise.
      */
    public boolean hasOutboundPort() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'outboundPort' field.
      * The outbound network port for this flow
      * @return This builder.
      */
    public NetFlowObject.Builder clearOutboundPort() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @return The value.
      */
    public java.lang.Integer getIpProtocol() {
      return ipProtocol;
    }

    /**
      * Sets the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @param value The value of 'ipProtocol'.
      * @return This builder.
      */
    public NetFlowObject.Builder setIpProtocol(java.lang.Integer value) {
      validate(fields()[6], value);
      this.ipProtocol = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ipProtocol' field has been set.
      * The IP protocol number e.g., TCP=6
      * @return True if the 'ipProtocol' field has been set, false otherwise.
      */
    public boolean hasIpProtocol() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @return This builder.
      */
    public NetFlowObject.Builder clearIpProtocol() {
      ipProtocol = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public NetFlowObject build() {
      try {
        NetFlowObject record = new NetFlowObject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (UUID) defaultValue(fields()[0]);
        if (baseObjectBuilder != null) {
          record.baseObject = this.baseObjectBuilder.build();
        } else {
          record.baseObject = fieldSetFlags()[1] ? this.baseObject : (AbstractObject) defaultValue(fields()[1]);
        }
        record.inboundAddress = fieldSetFlags()[2] ? this.inboundAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.inboundPort = fieldSetFlags()[3] ? this.inboundPort : (java.lang.Integer) defaultValue(fields()[3]);
        record.outboundAddress = fieldSetFlags()[4] ? this.outboundAddress : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.outboundPort = fieldSetFlags()[5] ? this.outboundPort : (java.lang.Integer) defaultValue(fields()[5]);
        record.ipProtocol = fieldSetFlags()[6] ? this.ipProtocol : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
