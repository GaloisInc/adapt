/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * TheiaQuery record used to request a fine-grained analysis to THEIA system */
@org.apache.avro.specific.AvroGenerated
public class TheiaQuery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4592104734377605801L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TheiaQuery\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* TheiaQuery record used to request a fine-grained analysis to THEIA system\",\"fields\":[{\"name\":\"queryId\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TheiaQueryType\",\"doc\":\"* TheiaQueryType used to indicate the type of TheiaQuery\",\"symbols\":[\"BACKWARD\",\"FORWARD\",\"POINT_TO_POINT\"]}},{\"name\":\"sourceId\",\"type\":[\"null\",\"UUID\"],\"default\":null},{\"name\":\"sinkId\",\"type\":[\"null\",\"UUID\"],\"default\":null},{\"name\":\"startTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"endTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.bbn.tc.schema.avro.UUID queryId;
  @Deprecated public com.bbn.tc.schema.avro.TheiaQueryType type;
  @Deprecated public com.bbn.tc.schema.avro.UUID sourceId;
  @Deprecated public com.bbn.tc.schema.avro.UUID sinkId;
  @Deprecated public java.lang.Long startTimestamp;
  @Deprecated public java.lang.Long endTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TheiaQuery() {}

  /**
   * All-args constructor.
   * @param queryId The new value for queryId
   * @param type The new value for type
   * @param sourceId The new value for sourceId
   * @param sinkId The new value for sinkId
   * @param startTimestamp The new value for startTimestamp
   * @param endTimestamp The new value for endTimestamp
   */
  public TheiaQuery(com.bbn.tc.schema.avro.UUID queryId, com.bbn.tc.schema.avro.TheiaQueryType type, com.bbn.tc.schema.avro.UUID sourceId, com.bbn.tc.schema.avro.UUID sinkId, java.lang.Long startTimestamp, java.lang.Long endTimestamp) {
    this.queryId = queryId;
    this.type = type;
    this.sourceId = sourceId;
    this.sinkId = sinkId;
    this.startTimestamp = startTimestamp;
    this.endTimestamp = endTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return queryId;
    case 1: return type;
    case 2: return sourceId;
    case 3: return sinkId;
    case 4: return startTimestamp;
    case 5: return endTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: queryId = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 1: type = (com.bbn.tc.schema.avro.TheiaQueryType)value$; break;
    case 2: sourceId = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 3: sinkId = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 4: startTimestamp = (java.lang.Long)value$; break;
    case 5: endTimestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'queryId' field.
   * @return The value of the 'queryId' field.
   */
  public com.bbn.tc.schema.avro.UUID getQueryId() {
    return queryId;
  }

  /**
   * Sets the value of the 'queryId' field.
   * @param value the value to set.
   */
  public void setQueryId(com.bbn.tc.schema.avro.UUID value) {
    this.queryId = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.bbn.tc.schema.avro.TheiaQueryType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.TheiaQueryType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   * @return The value of the 'sourceId' field.
   */
  public com.bbn.tc.schema.avro.UUID getSourceId() {
    return sourceId;
  }

  /**
   * Sets the value of the 'sourceId' field.
   * @param value the value to set.
   */
  public void setSourceId(com.bbn.tc.schema.avro.UUID value) {
    this.sourceId = value;
  }

  /**
   * Gets the value of the 'sinkId' field.
   * @return The value of the 'sinkId' field.
   */
  public com.bbn.tc.schema.avro.UUID getSinkId() {
    return sinkId;
  }

  /**
   * Sets the value of the 'sinkId' field.
   * @param value the value to set.
   */
  public void setSinkId(com.bbn.tc.schema.avro.UUID value) {
    this.sinkId = value;
  }

  /**
   * Gets the value of the 'startTimestamp' field.
   * @return The value of the 'startTimestamp' field.
   */
  public java.lang.Long getStartTimestamp() {
    return startTimestamp;
  }

  /**
   * Sets the value of the 'startTimestamp' field.
   * @param value the value to set.
   */
  public void setStartTimestamp(java.lang.Long value) {
    this.startTimestamp = value;
  }

  /**
   * Gets the value of the 'endTimestamp' field.
   * @return The value of the 'endTimestamp' field.
   */
  public java.lang.Long getEndTimestamp() {
    return endTimestamp;
  }

  /**
   * Sets the value of the 'endTimestamp' field.
   * @param value the value to set.
   */
  public void setEndTimestamp(java.lang.Long value) {
    this.endTimestamp = value;
  }

  /**
   * Creates a new TheiaQuery RecordBuilder.
   * @return A new TheiaQuery RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TheiaQuery.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.TheiaQuery.Builder();
  }

  /**
   * Creates a new TheiaQuery RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TheiaQuery RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TheiaQuery.Builder newBuilder(com.bbn.tc.schema.avro.TheiaQuery.Builder other) {
    return new com.bbn.tc.schema.avro.TheiaQuery.Builder(other);
  }

  /**
   * Creates a new TheiaQuery RecordBuilder by copying an existing TheiaQuery instance.
   * @param other The existing instance to copy.
   * @return A new TheiaQuery RecordBuilder
   */
  public static com.bbn.tc.schema.avro.TheiaQuery.Builder newBuilder(com.bbn.tc.schema.avro.TheiaQuery other) {
    return new com.bbn.tc.schema.avro.TheiaQuery.Builder(other);
  }

  /**
   * RecordBuilder for TheiaQuery instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TheiaQuery>
    implements org.apache.avro.data.RecordBuilder<TheiaQuery> {

    private com.bbn.tc.schema.avro.UUID queryId;
    private com.bbn.tc.schema.avro.TheiaQueryType type;
    private com.bbn.tc.schema.avro.UUID sourceId;
    private com.bbn.tc.schema.avro.UUID sinkId;
    private java.lang.Long startTimestamp;
    private java.lang.Long endTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.TheiaQuery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.queryId)) {
        this.queryId = data().deepCopy(fields()[0].schema(), other.queryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[2].schema(), other.sourceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sinkId)) {
        this.sinkId = data().deepCopy(fields()[3].schema(), other.sinkId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.startTimestamp)) {
        this.startTimestamp = data().deepCopy(fields()[4].schema(), other.startTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endTimestamp)) {
        this.endTimestamp = data().deepCopy(fields()[5].schema(), other.endTimestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TheiaQuery instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.TheiaQuery other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.queryId)) {
        this.queryId = data().deepCopy(fields()[0].schema(), other.queryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[2].schema(), other.sourceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sinkId)) {
        this.sinkId = data().deepCopy(fields()[3].schema(), other.sinkId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.startTimestamp)) {
        this.startTimestamp = data().deepCopy(fields()[4].schema(), other.startTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endTimestamp)) {
        this.endTimestamp = data().deepCopy(fields()[5].schema(), other.endTimestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'queryId' field.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getQueryId() {
      return queryId;
    }

    /**
      * Sets the value of the 'queryId' field.
      * @param value The value of 'queryId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setQueryId(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[0], value);
      this.queryId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'queryId' field has been set.
      * @return True if the 'queryId' field has been set, false otherwise.
      */
    public boolean hasQueryId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'queryId' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearQueryId() {
      queryId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.TheiaQueryType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setType(com.bbn.tc.schema.avro.TheiaQueryType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceId' field.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getSourceId() {
      return sourceId;
    }

    /**
      * Sets the value of the 'sourceId' field.
      * @param value The value of 'sourceId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setSourceId(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[2], value);
      this.sourceId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceId' field has been set.
      * @return True if the 'sourceId' field has been set, false otherwise.
      */
    public boolean hasSourceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sourceId' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sinkId' field.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getSinkId() {
      return sinkId;
    }

    /**
      * Sets the value of the 'sinkId' field.
      * @param value The value of 'sinkId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setSinkId(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[3], value);
      this.sinkId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sinkId' field has been set.
      * @return True if the 'sinkId' field has been set, false otherwise.
      */
    public boolean hasSinkId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sinkId' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearSinkId() {
      sinkId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getStartTimestamp() {
      return startTimestamp;
    }

    /**
      * Sets the value of the 'startTimestamp' field.
      * @param value The value of 'startTimestamp'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setStartTimestamp(java.lang.Long value) {
      validate(fields()[4], value);
      this.startTimestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'startTimestamp' field has been set.
      * @return True if the 'startTimestamp' field has been set, false otherwise.
      */
    public boolean hasStartTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'startTimestamp' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearStartTimestamp() {
      startTimestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEndTimestamp() {
      return endTimestamp;
    }

    /**
      * Sets the value of the 'endTimestamp' field.
      * @param value The value of 'endTimestamp'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder setEndTimestamp(java.lang.Long value) {
      validate(fields()[5], value);
      this.endTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'endTimestamp' field has been set.
      * @return True if the 'endTimestamp' field has been set, false otherwise.
      */
    public boolean hasEndTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'endTimestamp' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.TheiaQuery.Builder clearEndTimestamp() {
      endTimestamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TheiaQuery build() {
      try {
        TheiaQuery record = new TheiaQuery();
        record.queryId = fieldSetFlags()[0] ? this.queryId : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.bbn.tc.schema.avro.TheiaQueryType) defaultValue(fields()[1]);
        record.sourceId = fieldSetFlags()[2] ? this.sourceId : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[2]);
        record.sinkId = fieldSetFlags()[3] ? this.sinkId : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[3]);
        record.startTimestamp = fieldSetFlags()[4] ? this.startTimestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.endTimestamp = fieldSetFlags()[5] ? this.endTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
