/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Subjects represent execution contexts and include mainly threads and processes. They can be more granular and
     * can represent other execution boundaries such as functions and blocks if needed. */
@org.apache.avro.specific.AvroGenerated
public class Subject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4590599271314318178L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subject\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Subjects represent execution contexts and include mainly threads and processes. They can be more granular and\\n     * can represent other execution boundaries such as functions and blocks if needed.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"size\":16},\"doc\":\"universally unique identifier for the subject\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SubjectType\",\"doc\":\"* SUBJECT_PROCESS,    process\\n     * SUBJECT_THREAD, thread within a process\\n     * SUBJECT_UNIT        so far we only know of TRACE BEEP using this\",\"symbols\":[\"SUBJECT_PROCESS\",\"SUBJECT_THREAD\",\"SUBJECT_UNIT\",\"SUBJECT_BASIC_BLOCK\"]},\"doc\":\"the subject type\"},{\"name\":\"pid\",\"type\":\"int\",\"doc\":\"OS process id for type process and unit id for a unit (Optional)\"},{\"name\":\"ppid\",\"type\":\"int\",\"doc\":\"OS parent process id for type process and pid for type unit (Optional)\"},{\"name\":\"source\",\"type\":{\"type\":\"enum\",\"name\":\"InstrumentationSource\",\"doc\":\"* SOURCE_LINUX_AUDIT_TRACE,          from Linux /dev/audit\\n * SOURCE_LINUX_PROC_TRACE,           from Linux's /proc\\n     * * SOURCE_LINUX_BEEP_TRACE,           from BEEP instrumentation\\n     * * SOURCE_FREEBSD_OPENBSM_TRACE,      from FreeBSD openBSM\\n     * * SOURCE_ANDROID_JAVA_CLEARSCOPE,    from android java instrumentation\\n     * * SOURCE_ANDROID_NATIVE_CLEARSCOPE,  from android's native instrumentation\\n * * SOURCE_FREEBSD_DTRACE_CADETS, SOURCE_FREEBSD_TESLA_CADETS  for CADETS * freebsd instrumentation\\n     * SOURCE_FREEBSD_LOOM_CADETS, * SOURCE_FREEBSD_MACIF_CADETS    for CADETS freebsd instrumentation\\n     * * SOURCE_LINUX_THEIA                 from the GATech THEIA instrumentation * source\\n     * SOURCE_WINDOWS_FIVEDIRECTIONS      for the fivedirections * windows events\",\"symbols\":[\"SOURCE_LINUX_AUDIT_TRACE\",\"SOURCE_LINUX_PROC_TRACE\",\"SOURCE_LINUX_BEEP_TRACE\",\"SOURCE_FREEBSD_OPENBSM_TRACE\",\"SOURCE_ANDROID_JAVA_CLEARSCOPE\",\"SOURCE_ANDROID_NATIVE_CLEARSCOPE\",\"SOURCE_FREEBSD_DTRACE_CADETS\",\"SOURCE_FREEBSD_TESLA_CADETS\",\"SOURCE_FREEBSD_LOOM_CADETS\",\"SOURCE_FREEBSD_MACIF_CADETS\",\"SOURCE_WINDOWS_DIFT_FAROS\",\"SOURCE_LINUX_THEIA\",\"SOURCE_WINDOWS_FIVEDIRECTIONS\"]},\"doc\":\"Where it came from, see InstrumentationSource\"},{\"name\":\"startTimestampMicros\",\"type\":[\"null\",\"long\"],\"doc\":\"* The start time of the subject\\n         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\\n         * (Optional)\",\"default\":null},{\"name\":\"unitId\",\"type\":[\"null\",\"int\"],\"doc\":\"unit id for unit based instrumentation (Optional)\",\"default\":null},{\"name\":\"endTimestampMicros\",\"type\":[\"null\",\"long\"],\"doc\":\"The end time of the subject (Optional)\",\"default\":null},{\"name\":\"cmdLine\",\"type\":[\"null\",\"string\"],\"doc\":\"Process command line arguments including process name (Optional)\",\"default\":null},{\"name\":\"importedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"imported libraries (static or dynamic), (Optional)\",\"default\":null},{\"name\":\"exportedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"exported libraries (static or dynamic), (Optional)\",\"default\":null},{\"name\":\"pInfo\",\"type\":[\"null\",\"string\"],\"doc\":\"additional process information, such portable execution (PE) info in windows (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Arbitrary key, value pairs describing the entity\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** universally unique identifier for the subject */
  @Deprecated public com.bbn.tc.schema.avro.UUID uuid;
  /** the subject type */
  @Deprecated public com.bbn.tc.schema.avro.SubjectType type;
  /** OS process id for type process and unit id for a unit (Optional) */
  @Deprecated public int pid;
  /** OS parent process id for type process and pid for type unit (Optional) */
  @Deprecated public int ppid;
  /** Where it came from, see InstrumentationSource */
  @Deprecated public com.bbn.tc.schema.avro.InstrumentationSource source;
  /** * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional) */
  @Deprecated public java.lang.Long startTimestampMicros;
  /** unit id for unit based instrumentation (Optional) */
  @Deprecated public java.lang.Integer unitId;
  /** The end time of the subject (Optional) */
  @Deprecated public java.lang.Long endTimestampMicros;
  /** Process command line arguments including process name (Optional) */
  @Deprecated public java.lang.CharSequence cmdLine;
  /** imported libraries (static or dynamic), (Optional) */
  @Deprecated public java.util.List<java.lang.CharSequence> importedLibraries;
  /** exported libraries (static or dynamic), (Optional) */
  @Deprecated public java.util.List<java.lang.CharSequence> exportedLibraries;
  /** additional process information, such portable execution (PE) info in windows (Optional) */
  @Deprecated public java.lang.CharSequence pInfo;
  /** Arbitrary key, value pairs describing the entity */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Subject() {}

  /**
   * All-args constructor.
   * @param uuid universally unique identifier for the subject
   * @param type the subject type
   * @param pid OS process id for type process and unit id for a unit (Optional)
   * @param ppid OS parent process id for type process and pid for type unit (Optional)
   * @param source Where it came from, see InstrumentationSource
   * @param startTimestampMicros * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
   * @param unitId unit id for unit based instrumentation (Optional)
   * @param endTimestampMicros The end time of the subject (Optional)
   * @param cmdLine Process command line arguments including process name (Optional)
   * @param importedLibraries imported libraries (static or dynamic), (Optional)
   * @param exportedLibraries exported libraries (static or dynamic), (Optional)
   * @param pInfo additional process information, such portable execution (PE) info in windows (Optional)
   * @param properties Arbitrary key, value pairs describing the entity
   */
  public Subject(com.bbn.tc.schema.avro.UUID uuid, com.bbn.tc.schema.avro.SubjectType type, java.lang.Integer pid, java.lang.Integer ppid, com.bbn.tc.schema.avro.InstrumentationSource source, java.lang.Long startTimestampMicros, java.lang.Integer unitId, java.lang.Long endTimestampMicros, java.lang.CharSequence cmdLine, java.util.List<java.lang.CharSequence> importedLibraries, java.util.List<java.lang.CharSequence> exportedLibraries, java.lang.CharSequence pInfo, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.uuid = uuid;
    this.type = type;
    this.pid = pid;
    this.ppid = ppid;
    this.source = source;
    this.startTimestampMicros = startTimestampMicros;
    this.unitId = unitId;
    this.endTimestampMicros = endTimestampMicros;
    this.cmdLine = cmdLine;
    this.importedLibraries = importedLibraries;
    this.exportedLibraries = exportedLibraries;
    this.pInfo = pInfo;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return type;
    case 2: return pid;
    case 3: return ppid;
    case 4: return source;
    case 5: return startTimestampMicros;
    case 6: return unitId;
    case 7: return endTimestampMicros;
    case 8: return cmdLine;
    case 9: return importedLibraries;
    case 10: return exportedLibraries;
    case 11: return pInfo;
    case 12: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.UUID)value$; break;
    case 1: type = (com.bbn.tc.schema.avro.SubjectType)value$; break;
    case 2: pid = (java.lang.Integer)value$; break;
    case 3: ppid = (java.lang.Integer)value$; break;
    case 4: source = (com.bbn.tc.schema.avro.InstrumentationSource)value$; break;
    case 5: startTimestampMicros = (java.lang.Long)value$; break;
    case 6: unitId = (java.lang.Integer)value$; break;
    case 7: endTimestampMicros = (java.lang.Long)value$; break;
    case 8: cmdLine = (java.lang.CharSequence)value$; break;
    case 9: importedLibraries = (java.util.List<java.lang.CharSequence>)value$; break;
    case 10: exportedLibraries = (java.util.List<java.lang.CharSequence>)value$; break;
    case 11: pInfo = (java.lang.CharSequence)value$; break;
    case 12: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return universally unique identifier for the subject
   */
  public com.bbn.tc.schema.avro.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * universally unique identifier for the subject
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return the subject type
   */
  public com.bbn.tc.schema.avro.SubjectType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * the subject type
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.SubjectType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'pid' field.
   * @return OS process id for type process and unit id for a unit (Optional)
   */
  public java.lang.Integer getPid() {
    return pid;
  }

  /**
   * Sets the value of the 'pid' field.
   * OS process id for type process and unit id for a unit (Optional)
   * @param value the value to set.
   */
  public void setPid(java.lang.Integer value) {
    this.pid = value;
  }

  /**
   * Gets the value of the 'ppid' field.
   * @return OS parent process id for type process and pid for type unit (Optional)
   */
  public java.lang.Integer getPpid() {
    return ppid;
  }

  /**
   * Sets the value of the 'ppid' field.
   * OS parent process id for type process and pid for type unit (Optional)
   * @param value the value to set.
   */
  public void setPpid(java.lang.Integer value) {
    this.ppid = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return Where it came from, see InstrumentationSource
   */
  public com.bbn.tc.schema.avro.InstrumentationSource getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * Where it came from, see InstrumentationSource
   * @param value the value to set.
   */
  public void setSource(com.bbn.tc.schema.avro.InstrumentationSource value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'startTimestampMicros' field.
   * @return * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
   */
  public java.lang.Long getStartTimestampMicros() {
    return startTimestampMicros;
  }

  /**
   * Sets the value of the 'startTimestampMicros' field.
   * * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
   * @param value the value to set.
   */
  public void setStartTimestampMicros(java.lang.Long value) {
    this.startTimestampMicros = value;
  }

  /**
   * Gets the value of the 'unitId' field.
   * @return unit id for unit based instrumentation (Optional)
   */
  public java.lang.Integer getUnitId() {
    return unitId;
  }

  /**
   * Sets the value of the 'unitId' field.
   * unit id for unit based instrumentation (Optional)
   * @param value the value to set.
   */
  public void setUnitId(java.lang.Integer value) {
    this.unitId = value;
  }

  /**
   * Gets the value of the 'endTimestampMicros' field.
   * @return The end time of the subject (Optional)
   */
  public java.lang.Long getEndTimestampMicros() {
    return endTimestampMicros;
  }

  /**
   * Sets the value of the 'endTimestampMicros' field.
   * The end time of the subject (Optional)
   * @param value the value to set.
   */
  public void setEndTimestampMicros(java.lang.Long value) {
    this.endTimestampMicros = value;
  }

  /**
   * Gets the value of the 'cmdLine' field.
   * @return Process command line arguments including process name (Optional)
   */
  public java.lang.CharSequence getCmdLine() {
    return cmdLine;
  }

  /**
   * Sets the value of the 'cmdLine' field.
   * Process command line arguments including process name (Optional)
   * @param value the value to set.
   */
  public void setCmdLine(java.lang.CharSequence value) {
    this.cmdLine = value;
  }

  /**
   * Gets the value of the 'importedLibraries' field.
   * @return imported libraries (static or dynamic), (Optional)
   */
  public java.util.List<java.lang.CharSequence> getImportedLibraries() {
    return importedLibraries;
  }

  /**
   * Sets the value of the 'importedLibraries' field.
   * imported libraries (static or dynamic), (Optional)
   * @param value the value to set.
   */
  public void setImportedLibraries(java.util.List<java.lang.CharSequence> value) {
    this.importedLibraries = value;
  }

  /**
   * Gets the value of the 'exportedLibraries' field.
   * @return exported libraries (static or dynamic), (Optional)
   */
  public java.util.List<java.lang.CharSequence> getExportedLibraries() {
    return exportedLibraries;
  }

  /**
   * Sets the value of the 'exportedLibraries' field.
   * exported libraries (static or dynamic), (Optional)
   * @param value the value to set.
   */
  public void setExportedLibraries(java.util.List<java.lang.CharSequence> value) {
    this.exportedLibraries = value;
  }

  /**
   * Gets the value of the 'pInfo' field.
   * @return additional process information, such portable execution (PE) info in windows (Optional)
   */
  public java.lang.CharSequence getPInfo() {
    return pInfo;
  }

  /**
   * Sets the value of the 'pInfo' field.
   * additional process information, such portable execution (PE) info in windows (Optional)
   * @param value the value to set.
   */
  public void setPInfo(java.lang.CharSequence value) {
    this.pInfo = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Arbitrary key, value pairs describing the entity
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Arbitrary key, value pairs describing the entity
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new Subject RecordBuilder.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Subject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.Subject.Builder();
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Subject.Builder newBuilder(com.bbn.tc.schema.avro.Subject.Builder other) {
    return new com.bbn.tc.schema.avro.Subject.Builder(other);
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Subject instance.
   * @param other The existing instance to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.Subject.Builder newBuilder(com.bbn.tc.schema.avro.Subject other) {
    return new com.bbn.tc.schema.avro.Subject.Builder(other);
  }

  /**
   * RecordBuilder for Subject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subject>
    implements org.apache.avro.data.RecordBuilder<Subject> {

    /** universally unique identifier for the subject */
    private com.bbn.tc.schema.avro.UUID uuid;
    /** the subject type */
    private com.bbn.tc.schema.avro.SubjectType type;
    /** OS process id for type process and unit id for a unit (Optional) */
    private int pid;
    /** OS parent process id for type process and pid for type unit (Optional) */
    private int ppid;
    /** Where it came from, see InstrumentationSource */
    private com.bbn.tc.schema.avro.InstrumentationSource source;
    /** * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional) */
    private java.lang.Long startTimestampMicros;
    /** unit id for unit based instrumentation (Optional) */
    private java.lang.Integer unitId;
    /** The end time of the subject (Optional) */
    private java.lang.Long endTimestampMicros;
    /** Process command line arguments including process name (Optional) */
    private java.lang.CharSequence cmdLine;
    /** imported libraries (static or dynamic), (Optional) */
    private java.util.List<java.lang.CharSequence> importedLibraries;
    /** exported libraries (static or dynamic), (Optional) */
    private java.util.List<java.lang.CharSequence> exportedLibraries;
    /** additional process information, such portable execution (PE) info in windows (Optional) */
    private java.lang.CharSequence pInfo;
    /** Arbitrary key, value pairs describing the entity */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Subject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pid)) {
        this.pid = data().deepCopy(fields()[2].schema(), other.pid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ppid)) {
        this.ppid = data().deepCopy(fields()[3].schema(), other.ppid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.source)) {
        this.source = data().deepCopy(fields()[4].schema(), other.source);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTimestampMicros)) {
        this.startTimestampMicros = data().deepCopy(fields()[5].schema(), other.startTimestampMicros);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unitId)) {
        this.unitId = data().deepCopy(fields()[6].schema(), other.unitId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endTimestampMicros)) {
        this.endTimestampMicros = data().deepCopy(fields()[7].schema(), other.endTimestampMicros);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cmdLine)) {
        this.cmdLine = data().deepCopy(fields()[8].schema(), other.cmdLine);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.importedLibraries)) {
        this.importedLibraries = data().deepCopy(fields()[9].schema(), other.importedLibraries);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.exportedLibraries)) {
        this.exportedLibraries = data().deepCopy(fields()[10].schema(), other.exportedLibraries);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.pInfo)) {
        this.pInfo = data().deepCopy(fields()[11].schema(), other.pInfo);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.properties)) {
        this.properties = data().deepCopy(fields()[12].schema(), other.properties);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Subject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.Subject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pid)) {
        this.pid = data().deepCopy(fields()[2].schema(), other.pid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ppid)) {
        this.ppid = data().deepCopy(fields()[3].schema(), other.ppid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.source)) {
        this.source = data().deepCopy(fields()[4].schema(), other.source);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTimestampMicros)) {
        this.startTimestampMicros = data().deepCopy(fields()[5].schema(), other.startTimestampMicros);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unitId)) {
        this.unitId = data().deepCopy(fields()[6].schema(), other.unitId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endTimestampMicros)) {
        this.endTimestampMicros = data().deepCopy(fields()[7].schema(), other.endTimestampMicros);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cmdLine)) {
        this.cmdLine = data().deepCopy(fields()[8].schema(), other.cmdLine);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.importedLibraries)) {
        this.importedLibraries = data().deepCopy(fields()[9].schema(), other.importedLibraries);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.exportedLibraries)) {
        this.exportedLibraries = data().deepCopy(fields()[10].schema(), other.exportedLibraries);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.pInfo)) {
        this.pInfo = data().deepCopy(fields()[11].schema(), other.pInfo);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.properties)) {
        this.properties = data().deepCopy(fields()[12].schema(), other.properties);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @return The value.
      */
    public com.bbn.tc.schema.avro.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setUuid(com.bbn.tc.schema.avro.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * universally unique identifier for the subject
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * the subject type
      * @return The value.
      */
    public com.bbn.tc.schema.avro.SubjectType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * the subject type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setType(com.bbn.tc.schema.avro.SubjectType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * the subject type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * the subject type
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pid' field.
      * OS process id for type process and unit id for a unit (Optional)
      * @return The value.
      */
    public java.lang.Integer getPid() {
      return pid;
    }

    /**
      * Sets the value of the 'pid' field.
      * OS process id for type process and unit id for a unit (Optional)
      * @param value The value of 'pid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setPid(int value) {
      validate(fields()[2], value);
      this.pid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pid' field has been set.
      * OS process id for type process and unit id for a unit (Optional)
      * @return True if the 'pid' field has been set, false otherwise.
      */
    public boolean hasPid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pid' field.
      * OS process id for type process and unit id for a unit (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearPid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ppid' field.
      * OS parent process id for type process and pid for type unit (Optional)
      * @return The value.
      */
    public java.lang.Integer getPpid() {
      return ppid;
    }

    /**
      * Sets the value of the 'ppid' field.
      * OS parent process id for type process and pid for type unit (Optional)
      * @param value The value of 'ppid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setPpid(int value) {
      validate(fields()[3], value);
      this.ppid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ppid' field has been set.
      * OS parent process id for type process and pid for type unit (Optional)
      * @return True if the 'ppid' field has been set, false otherwise.
      */
    public boolean hasPpid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ppid' field.
      * OS parent process id for type process and pid for type unit (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearPpid() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * Where it came from, see InstrumentationSource
      * @return The value.
      */
    public com.bbn.tc.schema.avro.InstrumentationSource getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * Where it came from, see InstrumentationSource
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setSource(com.bbn.tc.schema.avro.InstrumentationSource value) {
      validate(fields()[4], value);
      this.source = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * Where it came from, see InstrumentationSource
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'source' field.
      * Where it came from, see InstrumentationSource
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearSource() {
      source = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTimestampMicros' field.
      * * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
      * @return The value.
      */
    public java.lang.Long getStartTimestampMicros() {
      return startTimestampMicros;
    }

    /**
      * Sets the value of the 'startTimestampMicros' field.
      * * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
      * @param value The value of 'startTimestampMicros'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setStartTimestampMicros(java.lang.Long value) {
      validate(fields()[5], value);
      this.startTimestampMicros = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startTimestampMicros' field has been set.
      * * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
      * @return True if the 'startTimestampMicros' field has been set, false otherwise.
      */
    public boolean hasStartTimestampMicros() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startTimestampMicros' field.
      * * The start time of the subject
         * A timestamp stores the number of microseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         * (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearStartTimestampMicros() {
      startTimestampMicros = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @return The value.
      */
    public java.lang.Integer getUnitId() {
      return unitId;
    }

    /**
      * Sets the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @param value The value of 'unitId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setUnitId(java.lang.Integer value) {
      validate(fields()[6], value);
      this.unitId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'unitId' field has been set.
      * unit id for unit based instrumentation (Optional)
      * @return True if the 'unitId' field has been set, false otherwise.
      */
    public boolean hasUnitId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearUnitId() {
      unitId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTimestampMicros' field.
      * The end time of the subject (Optional)
      * @return The value.
      */
    public java.lang.Long getEndTimestampMicros() {
      return endTimestampMicros;
    }

    /**
      * Sets the value of the 'endTimestampMicros' field.
      * The end time of the subject (Optional)
      * @param value The value of 'endTimestampMicros'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setEndTimestampMicros(java.lang.Long value) {
      validate(fields()[7], value);
      this.endTimestampMicros = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'endTimestampMicros' field has been set.
      * The end time of the subject (Optional)
      * @return True if the 'endTimestampMicros' field has been set, false otherwise.
      */
    public boolean hasEndTimestampMicros() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'endTimestampMicros' field.
      * The end time of the subject (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearEndTimestampMicros() {
      endTimestampMicros = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getCmdLine() {
      return cmdLine;
    }

    /**
      * Sets the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @param value The value of 'cmdLine'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setCmdLine(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.cmdLine = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'cmdLine' field has been set.
      * Process command line arguments including process name (Optional)
      * @return True if the 'cmdLine' field has been set, false otherwise.
      */
    public boolean hasCmdLine() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearCmdLine() {
      cmdLine = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'importedLibraries' field.
      * imported libraries (static or dynamic), (Optional)
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getImportedLibraries() {
      return importedLibraries;
    }

    /**
      * Sets the value of the 'importedLibraries' field.
      * imported libraries (static or dynamic), (Optional)
      * @param value The value of 'importedLibraries'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setImportedLibraries(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.importedLibraries = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'importedLibraries' field has been set.
      * imported libraries (static or dynamic), (Optional)
      * @return True if the 'importedLibraries' field has been set, false otherwise.
      */
    public boolean hasImportedLibraries() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'importedLibraries' field.
      * imported libraries (static or dynamic), (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearImportedLibraries() {
      importedLibraries = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'exportedLibraries' field.
      * exported libraries (static or dynamic), (Optional)
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getExportedLibraries() {
      return exportedLibraries;
    }

    /**
      * Sets the value of the 'exportedLibraries' field.
      * exported libraries (static or dynamic), (Optional)
      * @param value The value of 'exportedLibraries'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setExportedLibraries(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.exportedLibraries = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'exportedLibraries' field has been set.
      * exported libraries (static or dynamic), (Optional)
      * @return True if the 'exportedLibraries' field has been set, false otherwise.
      */
    public boolean hasExportedLibraries() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'exportedLibraries' field.
      * exported libraries (static or dynamic), (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearExportedLibraries() {
      exportedLibraries = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'pInfo' field.
      * additional process information, such portable execution (PE) info in windows (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getPInfo() {
      return pInfo;
    }

    /**
      * Sets the value of the 'pInfo' field.
      * additional process information, such portable execution (PE) info in windows (Optional)
      * @param value The value of 'pInfo'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setPInfo(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.pInfo = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'pInfo' field has been set.
      * additional process information, such portable execution (PE) info in windows (Optional)
      * @return True if the 'pInfo' field has been set, false otherwise.
      */
    public boolean hasPInfo() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'pInfo' field.
      * additional process information, such portable execution (PE) info in windows (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearPInfo() {
      pInfo = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the entity
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the entity
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.properties = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Arbitrary key, value pairs describing the entity
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'properties' field.
      * Arbitrary key, value pairs describing the entity
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.Subject.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    public Subject build() {
      try {
        Subject record = new Subject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.UUID) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.bbn.tc.schema.avro.SubjectType) defaultValue(fields()[1]);
        record.pid = fieldSetFlags()[2] ? this.pid : (java.lang.Integer) defaultValue(fields()[2]);
        record.ppid = fieldSetFlags()[3] ? this.ppid : (java.lang.Integer) defaultValue(fields()[3]);
        record.source = fieldSetFlags()[4] ? this.source : (com.bbn.tc.schema.avro.InstrumentationSource) defaultValue(fields()[4]);
        record.startTimestampMicros = fieldSetFlags()[5] ? this.startTimestampMicros : (java.lang.Long) defaultValue(fields()[5]);
        record.unitId = fieldSetFlags()[6] ? this.unitId : (java.lang.Integer) defaultValue(fields()[6]);
        record.endTimestampMicros = fieldSetFlags()[7] ? this.endTimestampMicros : (java.lang.Long) defaultValue(fields()[7]);
        record.cmdLine = fieldSetFlags()[8] ? this.cmdLine : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.importedLibraries = fieldSetFlags()[9] ? this.importedLibraries : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[9]);
        record.exportedLibraries = fieldSetFlags()[10] ? this.exportedLibraries : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[10]);
        record.pInfo = fieldSetFlags()[11] ? this.pInfo : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.properties = fieldSetFlags()[12] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
