/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** * Cryptographic hash records represent one or more cryptographic hashes for
     * an object, typically, a FileObject. */
@org.apache.avro.specific.AvroGenerated
public class CryptographicHash extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1963955027822445881L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CryptographicHash\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"* Cryptographic hash records represent one or more cryptographic hashes for\\n     * an object, typically, a FileObject.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"CryptoHashType\",\"doc\":\"Cryptographich hash types\",\"symbols\":[\"MD5\",\"SHA1\",\"SHA256\",\"SHA512\",\"AUTHENTIHASH\",\"SSDEEP\",\"IMPHASH\"]},\"doc\":\"The type of hash used\"},{\"name\":\"hash\",\"type\":\"string\",\"doc\":\"The base64 encoded hash value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The type of hash used */
  @Deprecated public com.bbn.tc.schema.avro.CryptoHashType type;
  /** The base64 encoded hash value */
  @Deprecated public java.lang.CharSequence hash;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CryptographicHash() {}

  /**
   * All-args constructor.
   * @param type The type of hash used
   * @param hash The base64 encoded hash value
   */
  public CryptographicHash(com.bbn.tc.schema.avro.CryptoHashType type, java.lang.CharSequence hash) {
    this.type = type;
    this.hash = hash;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return hash;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (com.bbn.tc.schema.avro.CryptoHashType)value$; break;
    case 1: hash = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of hash used
   */
  public com.bbn.tc.schema.avro.CryptoHashType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of hash used
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.CryptoHashType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The base64 encoded hash value
   */
  public java.lang.CharSequence getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * The base64 encoded hash value
   * @param value the value to set.
   */
  public void setHash(java.lang.CharSequence value) {
    this.hash = value;
  }

  /**
   * Creates a new CryptographicHash RecordBuilder.
   * @return A new CryptographicHash RecordBuilder
   */
  public static com.bbn.tc.schema.avro.CryptographicHash.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.CryptographicHash.Builder();
  }

  /**
   * Creates a new CryptographicHash RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CryptographicHash RecordBuilder
   */
  public static com.bbn.tc.schema.avro.CryptographicHash.Builder newBuilder(com.bbn.tc.schema.avro.CryptographicHash.Builder other) {
    return new com.bbn.tc.schema.avro.CryptographicHash.Builder(other);
  }

  /**
   * Creates a new CryptographicHash RecordBuilder by copying an existing CryptographicHash instance.
   * @param other The existing instance to copy.
   * @return A new CryptographicHash RecordBuilder
   */
  public static com.bbn.tc.schema.avro.CryptographicHash.Builder newBuilder(com.bbn.tc.schema.avro.CryptographicHash other) {
    return new com.bbn.tc.schema.avro.CryptographicHash.Builder(other);
  }

  /**
   * RecordBuilder for CryptographicHash instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CryptographicHash>
    implements org.apache.avro.data.RecordBuilder<CryptographicHash> {

    /** The type of hash used */
    private com.bbn.tc.schema.avro.CryptoHashType type;
    /** The base64 encoded hash value */
    private java.lang.CharSequence hash;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.CryptographicHash.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CryptographicHash instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.CryptographicHash other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * The type of hash used
      * @return The value.
      */
    public com.bbn.tc.schema.avro.CryptoHashType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of hash used
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.CryptographicHash.Builder setType(com.bbn.tc.schema.avro.CryptoHashType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of hash used
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of hash used
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.CryptographicHash.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash' field.
      * The base64 encoded hash value
      * @return The value.
      */
    public java.lang.CharSequence getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * The base64 encoded hash value
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.CryptographicHash.Builder setHash(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.hash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * The base64 encoded hash value
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hash' field.
      * The base64 encoded hash value
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.CryptographicHash.Builder clearHash() {
      hash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CryptographicHash build() {
      try {
        CryptographicHash record = new CryptographicHash();
        record.type = fieldSetFlags()[0] ? this.type : (com.bbn.tc.schema.avro.CryptoHashType) defaultValue(fields()[0]);
        record.hash = fieldSetFlags()[1] ? this.hash : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
